/*
-getting min or max in range can be done in several ways
1- segment tree 
   query logn  preprocess nlogn
2- sparse table 
   query o(1)  preprocess nlogn
so if i need to preprocess or build a new array it always needs nlogn.

-Here the idea is that i am using a deque and i have a sorted queries by their left side in increasing order
suppose that i will let the deque store the idexes of the elements where their values in increasing order so
the first will be the max element, as the queries are sorted by their left side increasingly so i won't need 
the elements before my left side so i will pop them so as the elements stored in increasing order by their 
values so the deque top will be the max number i want, second part is when i add an element i will check 
if the element is graeter than the deque back then i will pop till it less than or equal ( remeber i store 
in the deque the indexes of the elements not their values ).

query O(1)
preprocess O(N)

EX
Let an array A of length N be given and a number M â‰¤ N be given.
It is required to find a minimum in each sub-array of length M of the given array
CODE
----
// gets the max element in range (lf,rg)
int arr[N];
deque<ll> q; // stores the indexes of the values at arr
ll get(ll lf,int rg)
{
    while(!q.empty()&&q.front()<lf)
        q.pop_front();
    if(sz(q)>0)
    return arr[q.front()];
    return -1e15;     // means the max is -inf means there is no element
}
ll add(int i)
{

    while(!q.empty()&&arr[q.back()]<arr[i])
        q.pop_back();
    q.push_back(i);

}
----------------------------------------------------------------------------------------------------------------------------------------





















