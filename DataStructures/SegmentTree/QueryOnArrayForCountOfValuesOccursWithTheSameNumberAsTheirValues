- Problem:  query on an array to get the number of elements that occurs in a certain range with the number of their values.
- Idea: what if i take the queries offline and sort them in ascending order of the right bound so for every right bound i can get the 
answer of any query starts at any index and end at this right bound.
CODE
----
const int N=100009;
int tree[4*N],n,m,arr[N],ans[N],lf[N];
vector< deque<int> > D(N);
vector< pair<pair<int,int>,int> > q;
void update(int s,int e,int p,int pos,int val)
{
    if(s==e)
    {
        tree[p]=val;
        return ;
    }
    int m=(s+e)/2;
    if(pos<=m)
        update(s,m,p*2,pos,val);
    else
        update(m+1,e,p*2+1,pos,val);
    tree[p]=tree[p*2]+tree[p*2+1];
}
int query(int s,int e,int p,int a,int b)
{
    if(a>e||b<s)
        return 0;
    if(s>=a&&e<=b)
    {
        return tree[p];
    }
    int m=(s+e)/2;
  return query(s,m,p*2,a,b)+query(m+1,e,p*2+1,a,b);
}
int main()
{
    cin>>n>>m;
    for(int i=0;i<n;i++)
    {
        cin>>arr[i];
    }
    int l,r;
    for(int i=0;i<m;i++)
    {
        cin>>l>>r;
        l--; r--;
        q.pb(mp(mp(r,l),i));
    }
    sort(all(q));
    int id=0;
    clr(lf,-1);
    for(int i=0;i<sz(q);i++)
    {
        while(id<=q[i].first.first)
        {
            if(arr[id]>=N)
            {
                id++;
                continue;
            }
            D[arr[id]].pb(id);
            if(sz(D[arr[id]])>=arr[id])
            {
                if((sz(D[arr[id]])>arr[id]))
                {

                   if(lf[arr[id]]!=-1)
                    update(0,n-1,1,lf[arr[id]],0);

                   lf[arr[id]]=D[arr[id]].front();

                   update(0,n-1,1,lf[arr[id]],-1);
                   D[arr[id]].pop_front();
                }
                update(0,n-1,1,D[arr[id]].front(),1);
            }
            id++;
        }
        ans[q[i].second]=query(0,n-1,1,q[i].first.second,q[i].first.first);
    }

     for(int i=0;i<m;i++)
            cout<<ans[i]<<endl;
}
----------------------------------------------------------------------------------------------------------------------------------------






