Spare table computes RMQ without any updates to the orginal array in O(1) and preprocessing in O( nlogn ) and memory nlogn.

The idea is to precompute minimum of all subarrays of size 2^j where j varies from 0 to Log n. we make a lookup table. 
Here lookup[i][j] contains minimum of range starting from i and of size 2^j.
For example lookup[0][3] contains minimum of range [0, 7] (starting with 0 and of size 23)


// Fills lookup array lookup[][] in bottom up manner.
void preprocess(int arr[], int n)
{
    // Initialize M for the intervals with length 1
    for (int i = 0; i < n; i++)
        lookup[i][0] = i;
 
    // Compute values from smaller to bigger intervals
    for (int j=1; (1<<j)<=n; j++)
    {
        // Compute minimum value for all intervals with size 2^j
        for (int i=0; (i+(1<<j)-1) < n; i++)
        { 
            // For arr[2][10], we compare arr[lookup[0][3]] and
            // arr[lookup[3][3]]
            if (arr[lookup[i][j-1]] < arr[lookup[i + (1<<(j-1))][j-1]])
                lookup[i][j] = lookup[i][j-1];
            else
                lookup[i][j] = lookup[i + (1 << (j-1))][j-1];      
        }
    }
}
 
// Returns minimum of arr[L..R]
int query(int arr[], int L, int R)
{
    // For [2,10], j = 3
    int j = (int)log2(R-L+1);
 
    if (arr[lookup[L][j]] <= arr[lookup[R - (1<<j) + 1][j]])
        return arr[lookup[L][j]];
   else 
   return arr[lookup[R - (1<<j) + 1][j]];
}
