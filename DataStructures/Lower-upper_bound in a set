const Long N = 1e18;

struct node {
    int size;
    node *childL, *childR;

    node() {
        size = 0;
        childL = childR = this;
    }

    node(int s, node* l, node* r) {
        size = s;
        childL = l;
        childR = r;
    }
};

struct segment_multiset {
    node *nil, *root;

    segment_multiset() {
        root = nil = new node();
    }

	int size() {
        return root->size;
    }

    void insert(Long val) {
        insert(root, val, -N, N);
    }

	void insert(node*& root, Long val, Long l, Long r) {
        if (val < l || val > r) {
            return;
        }

        if (root == nil) {
            root = new node(0, nil, nil);
        }

        root->size++;

        if (l == r) {
            return;
        }

        Long mid = l + (r - l) / 2;

        insert(root->childL, val, l, mid);
        insert(root->childR, val, mid + 1, r);
    }

    int lower_bound(Long val) {
        int ret = 0;

        node* cur = root;
        Long l = -N, r = N;

        while (l < val) {
            Long mid = l + (r - l) / 2;

            if (val <= mid) {
                cur = cur->childL;
                r = mid;
            } else {
                ret += cur->childL->size;
                cur = cur->childR;
                l = mid + 1;
            }
        }

        return ret;
    }

    int upper_bound(Long val) {
        return lower_bound(val + 1);
    }
};
segment_multiset st;
st.insert(num);  st.upper_bound(val) // returns the idex 0 based of the element
----------------------------------------------------------------------------------------------------------------------------------------




