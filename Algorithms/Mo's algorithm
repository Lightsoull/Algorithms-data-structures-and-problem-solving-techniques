/*
Usage: it solves the query on a range.

Idea: it works with the query in offline mode, it divides the array into blocks of length sqrtN and assign each query to a block its number
is the left of the query divided by sqrtN and sort the queries according to its block number ascendingly and if there is a tie then sort
ascendingly according to the right of queries, then just do brude force.

Complexity: O( (n+q)*sqrt(n) )
Why ?
because for each block the right is sorted ascendingly so at most it will move n times for each block so over all sqrtN*N and the left will
move at most sqrtN to the left of the same block so over all is O( (n+q)*sqrt(n) ).

How Faster ?
sort the right of the first block ascendingly and the right for the second block decendingly then the right for the third asendingly and so
on this increases the overlap so decreases the time.

Example
need the value of element the ocurr once in a given range query.

CODE
----
const int N=500001;
const int sq=708;
int res=0,blockres[sq],cnt[N];
int arr[N],ans[N];
struct query
{
    int l,r,id;

}Q[N];
bool cmp(query &a,query &b)
{
        if(a.l/sq != b.l/sq)
            return (a.l < b.l);
        if((a.l/sq)&1)
            return (a.r<b.r);
        return (a.r>b.r);
}
void Remove(int id)
{
    int val=arr[id];
    cnt[val]--;
    if(cnt[val]==1)
    {
        res++;
        blockres[val/sq]++;
    }
     if(cnt[val]==0)
    {
        res--;
        blockres[val/sq]--;
    }
}
void Add(int id)
{
    int val=arr[id];
    cnt[val]++;
    if(cnt[val]==1)
    {
        res++;
        blockres[val/sq]++;
    }
    if(cnt[val]==2)
    {
        res--;
        blockres[val/sq]--;
    }
}
int Get()
{
    if(res==0)
        return 0;
    for(int i=0;i<sq;i++)
    {
        if(blockres[i]==0)
        continue;
        for(int j=i*sq;j<i*sq+sq;j++)
        {
            if(cnt[j]==1)
                return j;
        }
    }
}
int main()
{
    int n;
    scanf("%d",&n);
    for(int i=0;i<n;i++)
        scanf("%d",&arr[i]);
    int q;
    scanf("%d",&q);
    int l,r;
    for(int i=0;i<q;i++)
    {
        scanf("%d %d",&l,&r);
        l--;
        r--;
        Q[i].l=l;
        Q[i].r=r;
        Q[i].id=i;
    }
    sort(Q,Q+q,cmp);
    int curL=0,curR=-1;
    for(int i=0;i<q;i++)
    {
        int l=Q[i].l;
        int r=Q[i].r;
        while(curL<l)
        {
            Remove(curL);
            curL++;
        }
        while(curL>l)
        {
            curL--;
            Add(curL);
        }
        while(curR<r)
        {
            curR++;
            Add(curR);
        }
        while(curR>r)
        {
            Remove(curR);
            curR--;
        }
        ans[Q[i].id]= Get();
    }
    for(int i=0;i<q;i++)
        printf("%d\n",ans[i]);
}
--------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------
