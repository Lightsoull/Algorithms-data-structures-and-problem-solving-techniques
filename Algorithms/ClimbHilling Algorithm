Hill Climbing Algorithsm
the idea is about if i have an answer which is very estimated but not exact answer so i will try do move in other
directions and once a direction makes me closer to the solution i take it and from it search for a direction which
makes me more closer to the solution untill i get the exact solution.

CODE Example
double dist(double x1,double y1,double x2,double y2)
{
    return sqrt((x2-x1)*(x2-x1)+(y2-y1)*(y2-y1));
}
double estimate(const double& px, const double& py)
{
        vector<double> a(3);
        vector<double> b(3);
        for(int i = 0; i < 3; i++)
                a[i] = dist(px, py, X[i], Y[i]);
        b[0] = fabs(a[0] / a[1] - R[0] / R[1]);
        b[1] = fabs(a[0] / a[2] - R[0]/ R[2]);
        b[2] = fabs(a[2] / a[1] - R[2] / R[1]);
        sort(b.begin(), b.end());
        return b.back();
}
int main()
{
    double step=10.0,x=0.0,y=0.0;
    for(int i=0;i<3;i++)
    {
        cin>>X[i]>>Y[i]>>R[i];
        x+=X[i];
        y+=Y[i];
    }
    x/=3;
    y/=3;                      // estimated solution
    double mx=estimate(x,y);
    while(step>eps)
    {
        int i;
        for(i=0;i<8;i++)   // I have 8 directions to move through
        {
            x+= step*moves[i][0];
            y+= step*moves[i][1];

            double res=estimate(x,y);

            if(res<mx)
            {
                mx=res;         // once one get me closer to the solution i move through it
                break;
            }
            else
            {
                x-= step*moves[i][0];
                y-= step*moves[i][1];
            }
        }
        if(i==8)
            step/=2.0;
    }
     if(fabs(mx-0.0)<=eps)
    cout<<setprecision(6)<<x<<" "<<y<<endl;
}
--------------------------------------------------------------------------------------------------------------------------------
