#include<bits/stdc++.h>
using namespace std;
const int N=200009;
int seg[N],str[N],en[rN];
struct event{
  int x,l,r,ty;
  event(int x,int l,int r,int ty):x(x),l(l),r(r),ty(ty){}
};
struct tree{
   int ans,lazy,siz;
};
tree segtree[N*4];
int segsiz;
void Merge(int p){
  segtree[p].siz=segtree[p*2].siz+segtree[p*2+1].siz;
  segtree[p].ans=segtree[p*2].ans+segtree[p*2+1].ans;
}
void build(int s=0,int e=segsiz-1,int p=1){

   if(s==e){
    segtree[p].siz=seg[s];
    return ;
   }
   int m=(s+e)/2;
   int lf= p*2;
   int rg= lf+1;
   build(s,m,lf);
   build(m+1,e,rg);
   Merge(p);
}
void Push(int lf,int rg,int p){
  if(segtree[p].lazy==0)
    return ;
  segtree[lf].lazy^=1;
  segtree[rg].lazy^=1;

  segtree[lf].ans=segtree[lf].siz-segtree[lf].ans;
  segtree[rg].ans=segtree[rg].siz-segtree[rg].ans;
  segtree[p].lazy=0;
}
void update(int a,int b,int s=0,int e=segsiz-1,int p=1){
   if(b<str[s]||a>en[e]){
    return ;
   }
   if(str[s]>=a&&en[e]<=b){
    segtree[p].ans=segtree[p].siz-segtree[p].ans;
    segtree[p].lazy^=1;
    return ;
   }
   int m=(s+e)/2;
   int lf= p*2;
   int rg= lf+1;
   Push(lf,rg,p);
   update(a,b,s,m,lf);
   update(a,b,m+1,e,rg);
   Merge(p);
}
bool cmp(event a,event b){
   if(a.x!=b.x)
    return (a.x<b.x);
   return (a.ty<b.ty);
}
vector< event > e;
vector<int> Y;
int main(){
   int n;
   scanf("%d",&n);
   for(int i=0;i<n;i++){
    int x1,x2,y1,y2;
    scanf("%d %d %d %d",&x1,&y1,&x2,&y2);
    if(x1>x2) swap(x1,x2);
    if(y1>y2) swap(y1,y2);
    if(x1==x2||y1==y2) continue;
    e.push_back(event(x1,y1,y2-1,1));
    e.push_back(event(x2,y1,y2-1,0));
    Y.push_back(y1);
    Y.push_back(y2);
   }

   sort(e.begin(),e.end(),cmp);
   sort(Y.begin(),Y.end());
   Y.resize(unique(Y.begin(),Y.end())-Y.begin());
   for(int i=0;i<Y.size()-1;i++){
    seg[i]=(Y[i+1]-Y[i]);
    str[i]=Y[i]; en[i]=Y[i+1]-1;
   }
   segsiz=Y.size()-1;
   build();

   long long ans=0;
   for(int i=0;i<e.size()-1;i++){
     update(e[i].l,e[i].r);
     ans+= 1ll*(e[i+1].x-e[i].x)*segtree[1].ans;
  }
   printf("%I64d\n",ans);
}
