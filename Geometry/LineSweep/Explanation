-LineSweep: is a technique where i just use it to reduce the space search at some problem like Dp for example.
-Vertical Line sweep: is like a line you move it from left to right or reverse.
-Horizontal Line sweep: is like a line you move it from top to bottom or reverse.

-ActiveWindow: is the set of things ( points, shapes whatever ) i only want to compare them discarding every thing else because those things
only may affect the answer and any other thing for sure won't affect the answer, Sometimes the active window is too large it still 
works in n^2 so the point is to minmize the active window so it would make the over all complexity good, So we could only check a 
subset of the active window.
So 
1- get the active window
2- decide whether you will check all the active window or just a subset.
3- how i will check the subset i got.
4- at the end what would be the over all complexity.

-The Point will be to how you could get the active window sometimes you may use advanced data structures like treaps or segment tree or
you may use another line sweep.

Example 1

Closest pair problem: problem where you are given a set of points in a plane and he wants the nearest distance between 2 points
,first you may think brudeforce thinking but it works n^2, Line sweep technique is like a line you move it from left to right if the
minminum distance till now id d and the line moved to a new point the points that may affect the answer is the points the from left of 
the new point at most d distance so those points only will be my active window but there may be a lot of points in this window okay
we for sure every pair points in the window the distance between them will be greater then or equal to d and there is a theorm (see down)
--------------------
Theroem that says that if i have a rectangle of width d and height 2d can contain at most six points such that any two
points are at distance at least d, to prove that divide the rectangle in to 2 dxd rectangles put four points at one and another
two at other draw six circles every point will be center and the circle radius will be d and it is not allowed to put any point
in any circle bec this result in a pair of points the distance between them less than d which contradicts with d is the min 
distance will find that there is no space to put a single point.
--------------------
CODE
----
Notes on code
- take care of value of infinity
- if you compare the distance squared so events[right].X-events[left].X must be squared too

#define     point   complex<double>
#define   Y            imag()
#define   X            real()
#define   length(a)      hypot( (a.imag()),(a.real()) )
struct cmpX
{
    bool operator()(const point &a,const point &b)
    {
        if(dcmp(a.X,b.X)!=0)
            return dcmp(a.X,b.X)<0;
        return dcmp(a.Y,b.Y)<0;
    }
};
struct cmpY
{
    bool operator()(const point &a,const point &b)
    {
        if(dcmp(a.Y,b.Y)!=0)
            return dcmp(a.Y,b.Y)<0;
        return dcmp(a.X,b.X)<0;
    }
};
const double oo=1e15;
double closestpair(vector<point> &events)
{
    multiset< point , cmpY> activewindow;
    sort(all(events),cmpX());
    double d=oo;
    int left=0;
    for(int right=0;right<sz(events);right++)
    {
        while(left<right&& events[right].X-events[left].X > d)
            activewindow.erase(activewindow.find(events[left++]));
            
        auto strit= activewindow.lower_bound(point(-oo,events[right].Y-d));
        
        /* here the value of x of point is negative infinity bec if there is same y value 
           he must take the one with smallest x */
           
        auto enit= activewindow.upper_bound(point(-oo,events[right].Y+d));
        
        /* here the value of iterator keep it increased by one */
        
        for(;strit!=enit;strit++)
        {
            d=min(d,length( ( events[right]-(*strit) ) ));  // length must take the point in bracket
        }
        activewindow.insert(events[right]);
    }
    return d;
}
----------------------------------------------------------------------------------------------------------------------------------------
Example 2

Line segements intersection problem: the problem is to get the segements that intersect with each other first you may think of 
brudeforce which works in n^2, but there is soluton with line sweep works in nlogn, the idea if you are moving from left to right 
you will either pass by a start point of a segment or an end point of a segment if i am at a start point of a segement and there is 
a segment that i already passed by its start and end points so for sure i don't intersect with it so there is no need to put it 
in my active set so what i will put in my active set is the segments that starts and doesn't end till now but this may be too large
okay there is an algorithsm that let us take only 2 segments to check from all the active window.
Bently-Ottman Algorithm
- Let current segment is C
- From active set, let segment above C is A and
segment below C is B
- For Start Event
- Check intersect(Current, Above)
- Check intersect(Current, Below)
- Add C to active Set
- For End Event
- Remove C from active Set
- Check intersect(Above, Below)
Implementation
//we will build the segment strucure 
#define     point   complex<double>
#define   Y            imag()
#define   X            real()
#define   length(a)      hypot( (a.imag()),(a.real()) )
#define     same(p1,p2)               ( dp(  vec(p1,p2),vec(p1,p2)) < eps )

struct segment
{
    point p,q;
    int seg_id;
    
    segment(){seg_id=-1;}
    segment(point p_,point q_,int seg_id_)
    {
        if(q_<p_)
            swap(q_,p_);
        p=p_; q=q_;  seg_id=seg_id_;
    }
    double CY(int x) const
    {
        if(dcmp(p.X,q.X)==0)
            return p.Y;   // segment i project on is vertical
        
        double t= 1.0*(x-p.X)/(q.X-p.X);
        return p.Y+ t*(q.Y-p.Y);   /* this is the equation to get a point on a stright line but
                                       here i only deal with Y component bec i only need to get 
                                       the Y component not the whole point*/
    }
    /* here because i will sort according to this segment is above 
       me or not, i will decide if it is above or not if it is above
       so i will put it first, i will decide whether it is above or not
       by taking the max X of the start point of the two segments then
       project this X on the first and second segment the one with lower
       Y axis is at bottom and other is above.
    */
        
    bool operator<(const segment &rhs)const  
    {
        if(same(p,rhs.p)&&same(q,rhs.q))
            return false;
        int maxX=max(p.X,rhs.p.X);
        int yc= dcmp(CY(maxX),rhs.CY(maxX)); 
        
        if(yc==0) 
            return seg_id < rhs.seg_id;          // take care when the y value is equal 
        return yc<0;
    }
};
        
// Event structure
int Entry=1,Exist=-1;

struct Events
{
    point p;
    int type,seg_id;
    // sort on smaller X if tie put the entry point first if tie put smaller Y
    bool operator<(const Event & rhs)const
    {
        if(dcmp(p.X,rhs.p.X)!=0)
            return dcmp(p.X,rhs.p.X)<0;
        if(type!=rhs.type)
            return type>rhs.type;
        return dcmp(p.Y,rhs.p.Y)<0;
    }
};

int n;
segment segments[MAX_size];
Events events[MAX_size];
set< segment > sweepset;
typedef set<segment> :: iterator ITER;

// input
cin>>n;
for(int i=0;i<n;i++)
{
    cin>>x>>y;
    point p1=point(x,y);
    cin>>x>>y;
    point p2=point(x,y);
    segments[i]=segment(p1,p2,i);
}
// some used functions
bool intersectseg(ITER seg1ITER,ITER seg2ITER)
{
    if(seg1ITER==sweepset.end()||seg2ITER==sweepset.end())
        return false    
    return intersect(seg1ITER->p,seg1ITER->q,seg2ITER->p,seg2ITER->q);
}
ITER after(ITER cur)
{
    return (cur==sweepset.end() ? sweepset.end():++cur);
}
ITER before(ITER cur)
{
    return (cur==sweepset.begin()? sweepset.end():--cur);  // just make sweepset.end() as a flag 
}
void foundintersection(int i,int j)
{
    cout<<i+1<<" "<<j+1<<endl;
    // +1 because it is zero based
}
void bentleyottman_linesweep()  // works in O(nlogn)
{
    // prepare events
    for(int i=0;i<n;i++)
    {
        events[2*i]={segments[i].p,Entry,i};
        events[2*i+1]={segments[i].q,Exist,i};
    }
    sort(events,events+2*n);
    for(int i=0;i<2*n;i++)
    {
        if(events[i].type==Entry)
        {
            auto status= sweepset.insert(segments[events.seg_id]);
            ITER cur=status.first, below= before(cur), above=after(cur);
            if(!status.second)
            {
                Foundintersection(cur->seg_id,events[i].seg_id); // Duplicate segment
            }
            else
            {
                if(intersectseg(cur,above))
                    foundintersection(cur->seg_id,above->seg_id);
                if(intersectseg(cur,below))
                    foundintersection(cur->seg_id,below->seg_id);
            }
        }
        else
        {
            ITER cur= sweepset.find(segments[events[i].seg_id]);
            if(cur==sweepset.end())    // Duplicate segment
                continue;        
            ITER below= before(cur), above=after(cur);
            if(intersectseg(above,below))
                foundintersection(above->seg_id,below->seg_id);
            sweepset.erase(cur);
        }
    }
}
-------------------
Some applications on that
1- test if a polygon is simple or complex, note simple polygon no edges intersection so it is the same problem but
   take care for end points bec they already intersect at simple/complex.
2- Test if two polygons intersect , Again direct test if any of edges intersect and again take care of end points.
----------------------------------------------------------------------------------------------------------------------------------------
Example 3
Problem: I want to compute the union area of some rectangles that are parallel to x-axis.
Solution: Imagine if the rectangles starting from the x-axis to up so if i move with a vertical line from left to right and i stopped
at every starting edge or ending edge (as an event) of some rectangle, and taking the difference between the x-axis of current event
and the pervious event multiplied by the higest x-axis co-ordinate in that region here we can calculate the answer, but this is not the
general form the rectangles may not be starting directly from the x-axis there may be some gaps so i will use another horizontal line 
sweep that moves from up to bottom so i could get the start y-axis and the end y-axis where my region express.
CODE
----
/*
note the horizontal line sweep from lower y to up
*/
const int N=50009,Entry=0,Exist=1;
struct point
{
    int x,y;
    point()
    {
        x=y=0;
    }
    point(int x,int y):x(x),y(y){}
};
struct event
{
    int id,type;
    event(){}
    event(int id,int type):id(id),type(type){}
 
};
point rects[N][2];
event event_v[N],event_h[N];
// take care of size of events because its double the number of the rectangles
bool cmpX(event a,event b)
{
    if(rects[a.id][a.type].x!=rects[b.id][b.type].x)
     return rects[a.id][a.type].x<rects[b.id][b.type].x;
    if(a.type!=b.type)
        return a.type<b.type;
    return rects[a.id][a.type].y<rects[b.id][b.type].y;
}
bool cmpY(event a,event b)
{
    if(rects[a.id][a.type].y!=rects[b.id][b.type].y)
     return rects[a.id][a.type].y<rects[b.id][b.type].y;
    if(a.type!=b.type)
        return a.type<b.type;
    return rects[a.id][a.type].x<rects[b.id][b.type].x;
}
bool inActiveset[N];
int main()
{
    int n;
    cin>>n;
    int x1,y1,x2,y2;
    int events_cnt=0;
    /*
    x1,y1 lower left point
    x2,y2 upper right point
    */
    for(int i=0;i<n;i++)
    {
        cin>>x1>>y1>>x2>>y2;
        rects[i][Entry].x=x1; rects[i][Entry].y=y1; rects[i][Exist].x=x2; rects[i][Exist].y=y2;
        event_v[events_cnt]=event(i,Entry); event_v[events_cnt+1]=event(i,Exist);
        event_h[events_cnt]=event(i,Entry); event_h[events_cnt+1]=event(i,Exist);
        events_cnt+=2;
 
    }
    sort(event_v,event_v+events_cnt,cmpX);
    sort(event_h,event_h+events_cnt,cmpY);
 
    inActiveset[event_v[0].id]=1;
    ll area=0;
    for(int i=1;i<events_cnt;i++)
    {
        event cur=event_v[i];
        event pre=event_v[i-1];
        int deltaX,deltaY,cnt=0,first_rec;
        deltaX=rects[cur.id][cur.type].x-rects[pre.id][pre.type].x;
        if(deltaX==0)
        {
            inActiveset[cur.id]=(cur.type==Entry);
            continue;
        }
        for(int h=0;h<events_cnt;h++)
        {
            if(inActiveset[event_h[h].id]==1)
            {
               if(event_h[h].type==Entry)
               {
                if(cnt++==0)
                    first_rec=h;
               }
               else
               {
                   if(--cnt==0)
                   {
                       deltaY= rects[event_h[h].id][Exist].y-rects[event_h[first_rec].id][Entry].y;
                       area+= deltaX*deltaY;
                   }
               }
            }
        }
        inActiveset[cur.id]=(cur.type==Entry);
    }
    cout<<area<<endl;
}
O(n^2)
--------------------
A small update in the perious logic allow us to do it in O(nlogn) using segment tree instead of the horizontal line sweep.
CODE
----
const int N=4*50009;
struct Node
{
    int l,r,length,cover,coverlength,lines;
    Node(){}
    Node(int l,int r,int length,int cover,int coverlength,int lines) : l(l),r(r),length(length),cover(cover),
    coverlength(coverlength),lines(lines) {}
 
    Node operator+(const Node &b)
    {
        Node c;
        c.cover=0;
        c.l=l;
        c.r=b.r;
        c.length=length+b.length;
        c.coverlength=coverlength+b.coverlength;
        c.lines= lines+b.lines-(r&&b.l);
 
        return c;
    }
};
Node tree[N];
void Push(int p)
{
    if(tree[p].cover==0)
    {
        tree[p]=tree[p*2]+tree[p*2+1];
    }
    else
    {
        tree[p].coverlength=tree[p].length;
        tree[p].l=tree[p].r=tree[p].lines=1;
    }
}
void build(int s,int e,int p)
{
    if(s==e)
    {
        tree[p].l=tree[p].r=tree[p].cover=tree[p].coverlength=tree[p].lines=0;
        tree[p].length=1;
        return ;
    }
    int m=(s+e)/2;
    build(s,m,p*2);
    build(m+1,e,p*2+1);
    tree[p].cover=0;
    Push(p);
}
void cover(int s,int e,int a,int b,int p)
{
    if(s>b||a>e)
    {
        return;
    }
    if(s>=a&&e<=b)
    {
        if(tree[p].cover==0)
        {
            tree[p].l=tree[p].r=tree[p].lines=1;
            tree[p].coverlength=tree[p].length;
        }
        tree[p].cover++;
     return;
    }
    int m=(s+e)/2;
    cover(s,m,a,b,p*2);
    cover(m+1,e,a,b,p*2+1);
    Push(p);
}
void uncover(int s,int e,int a,int b,int p)
{
    if(s>b||a>e)
    {
        return;
    }
    if(s>=a&&e<=b)
    {
        tree[p].cover--;
        if(tree[p].cover==0)
        {
            if(s==e)
            {
                tree[p].l=tree[p].r=tree[p].lines=tree[p].coverlength=0;
            }
            else
                tree[p]=tree[p*2]+tree[p*2+1];
        }
        return;
    }
    int m=(s+e)/2;
    uncover(s,m,a,b,p*2);
    uncover(m+1,e,a,b,p*2+1);
    Push(p);
}
#define pii pair<int,int>
vector< pair<pii,pii> > v;
int main()
{
    int n;
    cin>>n;
    int x1,y1,x2,y2;
    int events_cnt=0;
    for(int i=0;i<n;i++)
    {
        cin>>x1>>y1>>x2>>y2;
        v.pb(mp(mp(x1,y1),mp(y2,0)));
        v.pb(mp(mp(x2,y1),mp(y2,1)));
    }
    build(0,30005,1);
    sort(all(v));
    ll area=0,last=0;
    for(int i=0;i<sz(v);i++)
    {
        area+= tree[1].coverlength*(v[i].first.first-last);
        if(v[i].second.second==0)
            cover(0,30005,v[i].first.second,v[i].second.first-1,1);  // Takecare here i have to subtract 1 from the right end
        else                                                             bec i calculate the difference between the two y ranges 
            uncover(0,30005,v[i].first.second,v[i].second.first-1,1);    which is y2-y1 not y2-y1+1.
       last=v[i].first.first;
    }
    cout<<area<<endl;
}
O(nlogn)
----------------------------------------------------------------------------------------------------------------------------------------
Example 4
getting primeter of union of rectangles
there is 2 ways to do so
1- doing horizontal sweep then doing vertical sweep on the rectangles
CODE
----
const int MAXN=25000;
int visited[MAXN];
int query(int L, int R){
    int ans=0;
    for(int i=L; i<=R; i++) ans+=(visited[i]!=0);
    return ans;

}
void update(int L, int R, int val){
    for(int i=L; i<=R; i++) visited[i]+=val;
}
vector<pair<pii,pii> > eventsX;
vector<pair<pii,pii> > eventsY;

int solve(){
    sort(eventsX.begin(),eventsX.end());
    sort(eventsY.begin(),eventsY.end());
    int ans=0;
    for(int i=0; i<eventsX.size(); i++){
        int L=eventsX[i].ss.ff;
        int R=eventsX[i].ss.ss;
        if(eventsX[i].ff.ss==1){
        update(L,R-1,-1);
         ans+=(R-L)- query(L,R-1);
        }else{
            ans+=(R-L)- query(L,R-1);
            update(L,R-1,1);
        }
    }
    memset(visited,0, sizeof visited);
    for(int i=0; i<eventsY.size(); i++){
        int L=eventsY[i].ss.ff;
        int R=eventsY[i].ss.ss;
        if(eventsY[i].ff.ss==1){
        update(L,R-1,-1);
         ans+=(R-L)- query(L,R-1);
        }else{
            ans+=(R-L)- query(L,R-1);
            update(L,R-1,1);
        }
    }
    return ans;
}
int main(){
    int a,b,c,d;
    int n;
   scanf("%d",&n);
    lp(i,n){
       scanf("%d%d%d%d",&a,&b,&c,&d);
        a+=10000;
        c+=10000;
        d+=10000;
        b+=10000;  // just shifting values
        eventsX.pb({{a,0},{b,d}});
        eventsX.pb({{c,1},{b,d}});
               eventsY.pb({{b,0},{a,c}});
        eventsY.pb({{d,1},{a,c}});
    }
    printf("%d\n",solve());
}
--------------------------------------------------
2- Doing the same but the query and update with segment tree so the overall complexity O( nlogn )
CODE
----
const int N=4*50009;
struct Node
{
    int l,r,length,cover,coverlength,lines;
    Node(){}
    Node(int l,int r,int length,int cover,int coverlength,int lines) : l(l),r(r),length(length),cover(cover),
    coverlength(coverlength),lines(lines) {}
 
    Node operator+(const Node &b)
    {
        Node c;
        c.cover=0;
        c.l=l;
        c.r=b.r;
        c.length=length+b.length;
        c.coverlength=coverlength+b.coverlength;
        c.lines= lines+b.lines-(r&&b.l);
 
        return c;
    }
};
Node tree[N];
void Push(int p)
{
    if(tree[p].cover==0)
    {
        tree[p]=tree[p*2]+tree[p*2+1];
    }
    else
    {
        tree[p].coverlength=tree[p].length;
        tree[p].l=tree[p].r=tree[p].lines=1;
    }
}
void build(int s,int e,int p)
{
 
    if(s==e)
    {
        tree[p].l=tree[p].r=tree[p].cover=tree[p].coverlength=tree[p].lines=0;
        tree[p].length=1;
        return ;
    }
    int m=(s+e)/2;
    build(s,m,p*2);
    build(m+1,e,p*2+1);
    tree[p].cover=0;
    Push(p);
 
}
void cover(int s,int e,int a,int b,int p)
{
 
    if(s>b||a>e)
    {
        return;
    }
    if(s>=a&&e<=b)
    {
 
        if(tree[p].cover==0)
        {
 
            tree[p].l=tree[p].r=tree[p].lines=1;
            tree[p].coverlength=tree[p].length;
 
        }
        tree[p].cover++;
     return;
    }
    int m=(s+e)/2;
    cover(s,m,a,b,p*2);
    cover(m+1,e,a,b,p*2+1);
 
    Push(p);
}
void uncover(int s,int e,int a,int b,int p)
{
 
    if(s>b||a>e)
    {
        return;
    }
    if(s>=a&&e<=b)
    {
        tree[p].cover--;
        if(tree[p].cover==0)
        {
            if(s==e)
            {
                tree[p].l=tree[p].r=tree[p].lines=tree[p].coverlength=0;
            }
            else
                tree[p]=tree[p*2]+tree[p*2+1];
 
        }
        return;
 
    }
    int m=(s+e)/2;
    uncover(s,m,a,b,p*2);
    uncover(m+1,e,a,b,p*2+1);
 
    Push(p);
}
 
#define pii pair<int,int>
vector< pair<pii,pii> > v;
vector< pair<pii,pii> > vv;
int main()
{
    int n;
    cin>>n;
    int x1,y1,x2,y2;
    int events_cnt=0;
    for(int i=0;i<n;i++)
    {
        cin>>x1>>y1>>x2>>y2;
        y2+=10001;
        y1+=10001;  // shifting
        v.pb(mp(mp(x1,0),mp(y1,y2)));
        v.pb(mp(mp(x2,1),mp(y1,y2)));
 
        vv.pb(mp(mp(y1,0),mp(x1,x2)));
        vv.pb(mp(mp(y2,1),mp(x1,x2)));
    }
    build(0,30005,1);
    sort(all(v));
    sort(all(vv));
 
    ll area=0,last=0,precoverlength=0,prelines=0;
    for(int i=0;i<sz(v);i++)
    {
        if(v[i].first.second==0)
            cover(0,30005,v[i].second.first,v[i].second.second-1,1);
        else
            uncover(0,30005,v[i].second.first,v[i].second.second-1,1);
 
        area+= 2ll*prelines*(v[i].first.first-last);
        area+= llabs(tree[1].coverlength-precoverlength);
        precoverlength=tree[1].coverlength;
        prelines=tree[1].lines;
       last=v[i].first.first;
 
    }
 
    cout<<area<<endl;
}
O(nlogn)
----------------------------------------------------------------------------------------------------------------------------------------
 Notes
 - Getting a segment in terms of x or y may help in no need for sorting and just moving on the x or y in order.
 ----------------------------------------------------------------------------------------------------------------------------------------

 
 


