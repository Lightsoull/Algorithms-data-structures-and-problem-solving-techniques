- Getting the circle from three points
  // create two lines from the three points ( they the chords of the circle meet at the top point )
     by the fact that the bisectors of the two chords meet in the center of the circle and they bisect the chords by 90 degree.
     
  // so i will create the 2 prependicular bisectors vectors and get the point of its intersection which is the center of the circle.
  
  CODE
 
 // TakeCare first check if the three points are collinear or not 
 if they are collinear so no circle is found else there is a circle.
 
 pair<double, point> findCircle(point a, point b, point c)   // a,b,c the three points to form circle from them returning its redius and
 {                                                               and center
	//create median, vector, its prependicular
  
	point m1 = (b+a)*0.5, v1 = b-a, pv1 = point(v1.Y, -v1.X);
	point m2 = (b+c)*0.5, v2 = b-c, pv2 = point(v2.Y, -v2.X);
	point end1 = m1+pv1, end2 = m2+pv2, center;
	intersectSegments(m1, end1, m2, end2, center);
	return make_pair( length( (a-center) ), center );  
}
 --------------------------------------------------------------------------------------------------------------------------------------
 Intersection between line and circle 
 
 may be in 1,2 or 0 points 
 at two points is called secant
 ---------------------------------
 How ?
 we can express any point p at line p0p1 in parametric equation as  p= p0 + t(p1-p0) ---- 1
 so let it intersects with circle at 2 points every one has the same equation as it located at the same line but with different t
 there is a fact that  (p-center)*(p-center) = r^2 ----2  ( r radius of the circle ) , then subsitute by 1 in 2
 (p1-p0)(p1-p0)t^2 + 2(p1-p0)(p0-C)t + (p0-C)(p0-C) = r*r; -> Quadratic
 
 Note: this code to deal with line and circle intersection, a line not a line segment so here the line like a vector without 
 limited length like the line segment, So if you want to deal with a line segment at the end of the code you will have the two 
 intersection points and they are on the circle for sure but you have to check whether they are on the line or not because if not 
 don't consider them.
 
 CODE
 #define    PI            acos(-1)
#define   angle(n)      atan2((n.imag()),(n.real()))
#define   vec(a,b)       ((b)-(a))
#define   length(a)      hypot( (a.imag()),(a.real()) )
#define   normalize(a)      (a)/(length(a))
#define    dp(a,b)          (((conj(a))*(b)).real())
#define    cp(a,b)          (((conj(a))*(b)).imag())
#define    lengthsqrt(a)       dp(a,a)
#define    rotate0( a,ang)    ((a)*exp( point(0,ang) ))
#define    rotateA(about,p,ang)   (rotate0(vec(about,p),ang)+about)
#define    lcm(a,b)                ((a*b)/(__gcd(a,b)))
#define    reflection0(m,v)         (conj((v)/(m))*(m))
#define     reflectionA(m,v,p0)     (conj( (vec(p0,v))/(vec(p0,m)) ) * (vec(p0,m)) ) + p0
#define     same(p1,p2)               ( dp(  vec(p1,p2),vec(p1,p2)) < EPS )
#define dot(a,b) ((conj(a)*(b)).real())
#define lengthSqr(v) (dot(v,v))

bool is_in(double x,double y,double x1,double x2,double y1,double y2){
 
  return (x>=x1&&x<=x2&&y>=y1&&y<=y2);
}
// zero --> no intersection
// one --> one point intersection
// two --> two points intersection
int circleLineIntersection(point p0,point p1,point cen,double rad,point &r1,point &r2){
 
 if (same(p0,p1)){
     if (fabs(lengthSqr(vec(p0,cen)) - (rad * rad)) < EPS){
         r1 = r2 = p0;
         return 1;
     }
    return 0;
  }
  long double a, b, c, t1, t2;
  a = dot(p1-p0,p1-p0);
  b = 2 * dot(p1-p0,p0-cen);
  c = dot(p0-cen,p0-cen) - rad * rad;
  double det = b * b - 4 * a * c;
  int res;
  if (fabs(det) < EPS)
    det = 0, res = 1;
  else if (det < 0)   res=0;
  else   
    res = 2;
    
  det = sqrt(det);
  t1 = (-b + det) / (2 * a);
  t2 = (-b - det) / (2 * a);
  point tmp=(p1 - p0);
  point nw;
  nw.real(tmp.real()*t1);
  nw.imag(tmp.imag()*t1);
  r1 = p0 + nw;
 
  nw.real(tmp.real()*t2);
  nw.imag(tmp.imag()*t2);
 
  r2 = p0 + nw;
 
 // end the code here if you deal with a vector not line segment. else go further
 
  int sx=min(p0.real(),p1.real());
  int sy=min(p0.imag(),p1.imag());
  int ex=max(p0.real(),p1.real());
  int ey=max(p0.imag(),p1.imag());
 
  if(is_in(r1.real(),r1.imag(),sx,ex,sy,ey)==0&&is_in(r2.real(),r2.imag(),sx,ex,sy,ey)==0) return 0;
  
  if(is_in(r1.real(),r1.imag(),sx,ex,sy,ey)==1&&is_in(r2.real(),r2.imag(),sx,ex,sy,ey)==1){
    return res;
  }
  if(is_in(r1.real(),r1.imag(),sx,ex,sy,ey)==1){
    r2=r1;
    return 1;
  }
  if(is_in(r2.real(),r2.imag(),sx,ex,sy,ey)==1){
    r1=r2;
    return 1;
  }
 
  return res;
 
}
---------------------------------------------------------------------------------------------------------------------------------------
Intersection between 2 Circles
may be in 0,1,2,inf points
inf if the two circles have same center and same radius 
c1 center of first circle c2 center of the second circle r1 radius of the first circle r2 radius of the second circle
to do function getAngle_A_abc which return in rad
rules
1- cosA= ( b^2+c^2-a^2 ) / 2*bc  

vector<point> intersectCircleCircle(point c1, double r1, point c2, double r2) 
{
  // Handle infinity case first: same center and radius and r > 0
  
  if (same(c1, c2) && dcmp(r1, r2) == 0 && dcmp(r1, 0) > 0)
    return vector<point>(3, c1);    // infinity 2 same circles (not points)
                                                                              
     // Compute 2 intersection case and handle 0, 1, 2 cases
    double ang1 = angle(c2 - c1), ang2 = getAngle_A_abc(r2, r1, length(c2 - c1)); // a=r2, b=r1

  if(::isnan(ang2))                     // if r1 or d = 0 => nan in getAngle_A_abc (/0)
    ang2 = 0;                           // fix corruption

  vector<point> v(1, polar(r1, ang1 + ang2) + c1);

  // if point NOT on the 2 circles = no intersection
  if(dcmp(dp(v[0]-c1, v[0]-c1), r1*r1) != 0 || dcmp(dp(v[0]-c2, v[0]-c2), r2*r2) != 0 )
    return vector<point>();

  v.push_back(polar(r1, ang1 - ang2) + c1);
  
  if(same(v[0], v[1]))  // if same, then 1 intersection only
    v.pop_back();
  return v;
}

// if you want just check for intersection you can use this
bool is_intersect(ll x1, ll y1, ll x2,ll y2, ll r1, ll r2){
    ll distSq = 1ll*(x1 - x2) * (x1 - x2) +
                 1ll*(y1 - y2) * (y1 - y2);
    
	ll sub = 1ll*(r1-r2)*(r1-r2);
	ll radSumSq = 1ll*(r1 + r2) * (r1 + r2);
	if(distSq<=radSumSq&&distSq>sub){ // means it is not completely inside each other or outside each other, there is intersection
		return 1;
	}
    return 0;
}

----------------------------------------------------------------------------------------------------------------------------------------
MEC ( Min Enclosing Circle )

this algorithsm works in O( N ) proven bec by randomizing points this improving some probability that will let it work in this time

const int MAX = 100000+9;
point pnts[MAX], r[3], cen;
double rad;
int ps, rs;	// ps = n, rs = 0, initially        n is the number of points

// Pre condition
// random_shuffle(pnts, pnts+ps);		rs = 0;
void MEC() {
	if(ps == 0 && rs == 2) {
		cen = (r[0]+r[1])/2.0;
		rad = length( (r[0]-cen) );  // extra brackets are important
	}
	else if(rs == 3) {
		pair<double, point> p = findCircle(r[0], r[1], r[2]);
		cen = p.second;
		rad = p.first;
	}
	else if(ps == 0) {
		cen = r[0];	// sometime be garbage, but will not affect
		rad = 0;
	}
	else {
		ps--;
		MEC();

		if(length( (pnts[ps]-cen) ) > rad) {
			r[rs++] = pnts[ps];
			MEC();
			rs--;
		}

		ps++;
	}
}
--------------------------------------------------------------------------------------------------------------------------------------




















































































 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
  
