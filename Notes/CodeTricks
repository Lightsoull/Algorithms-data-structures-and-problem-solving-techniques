if i want to get the number of elements less than certain value i can construct an array and if my i get number let it be no i 
will increment the position of the number greater than it with one ( i men by that there is a number less than the cureent position
then after all accumulate . 
code                                                                                                                                                                                                                                                                    
     for(int i=0;i<n;i++)
    {
        cin>>no;
        v.pb(no);
        lessthan[no+1]++;
    }
    for(int i=1;i<=1000;i++)
        lessthan[i]+=lessthan[i-1];
------------------------------------------------------------------------------------------------------------------------------------------
At DSU when you want to access each subtree or partion just loop an all the nodes and 
record the parent of each one and store the parents at a set .
    for(int i=1;i<=n;i++)
     {
         int w=par(i);
         s.insert(w);
         v[w].pb(i);
     }
----------------------------------------------------------------------------------------------------------------------------------------
The accumulation idea for eg the accumulated sum can be also on sum with a certain mod.
code                                                                                                                                                                                                 
         for(int i=1;i<N;i++)
         {
             arr[i]=(arr[i]+arr[i-1])%M;
         }
----------------------------------------------------------------------------------------------------------------------------------------
  If you have a tree with N nodes and N-1 edges and you want to get  sigma distance(u,v)  such that u!=v  so there is a trick which is 
  void dfs(int id,int p)
{

    arr[id]=1;

    for(int i=0;i<sz(v[id]);i++)
    {
        int no=v[id][i].first;
        int ed=v[id][i].second;

        if(no==p)
            continue;

        dfs(no,id);

        arr[id]+= arr[no];
        dep[ed]= arr[no]*(N-arr[no]);


    }
}
int main()
{

    cin>>N;
    int f,t,w;
    for(int i=1;i<N;i++)
    {
        cin>>f>>t>>w;
        v[f].pb(mp(t,i));
        v[t].pb(mp(f,i));
        W[i]=w;
    }

    dfs(1,-1);
    double ans=0.0;
    for(int i=1;i<N;i++)
        ans+= dep[i]*W[i];

    ans*=2;
}
--------------------------------------------------------------------------------------------------------------------------------------
At iterative topological sort you can put the periority reversed so that you will not need to reverse the answer vector at the end 
and the iterative topological sort allow you to know the possible ways of the sorted result array but dfs not
--------------------------------------------------------------------------------------------------------------------------------------
if you want to print in the format where if  the result is 8 the out put will be 08  and if its in 2 digits it out normally so
just   printf("%.2d",res); 
---------------------------------------------------------------------------------------------------------------------------------------
at the dp with out put if there is 2 searios whether you choose to take a thing or to not take it and you want to print what i 
take it So to array called it next where it points to the next state and another array called it print if you choose it so put the 
answer in it and if you don't choose it so mark it with -1 for example so at the main if the print equals to -1 so go to next else 
print and go to next 
----------------------------------------------------------------------------------------------------------------------------------------
if you use a class and want to sort according to some thing .
class Job
{
    public:
        int input_id,subject_id;
        int profit,deadline;
    bool operator < (const Job &with) const
    {
        if (deadline != with.deadline)return deadline < with.deadline;
        return input_id < with.input_id;
    }
}
and with is the the element2 for example and deadline is element1 
---------------------------------------------------------------------------------------------------------------------------------------
If you Play and there is turns first player turn and second player turn and there is number of rounds from the number of rounds passed
till know you can know the current turn belongs to which player .
---------------------------------------------------------------------------------------------------------------------------------------
if you want to use clr( mem,-1) with double arrays okay but the inside mem will be nan and nan will not equal to itself so write in dp
double &ret=mem[i][j];

if(ret==ret)
    return ret;
----------------------------------------------------------------------------------------------------------------------------------------
nan not equal itself 
----------------------------------------------------------------------------------------------------------------------------------------
At Games With Dp if there is a turns so you can just swap between the players that the first one in the state is the one that this
turn belongs to him 
Another note if you store two scores for example in your state one for the first and the other for the second and you care about 
the difference between them so you can just store the difference between them for each express the difference between it and the 
other player.
code
"newdiff= mydiffbetmeandhim + myaddedval; 
p+= solve(rounds-1,-newdiff);  // -ve bec if the diff bet me and him is newdiff then the diff between him and me is -newdiff"
But take care at the state the diff may be with -ve so shift it
----------------------------------------------------------------------------------------------------------------------------------------
Dp with masks i can represent 0s and 1s state by converting binary (base 2 numbers)  to decimal okay what if i need to represent some 
thing by 0s 1s and 2s so you can use base 3 numbers 
"decnum=0;
decnum= decnum*(base of number)+the cell of number   // from number of any base to decimal

while(decnum>0)   // from decimal to base of number
{
    int v= decnum%base of num ;
    decnum/=base of num;
}

but in will be in (base of num)^(num of cells)"
----------------------------------------------------------------------------------------------------------------------------------------
Note if you can use mask  you can use mask you can use vector also .
you may use helper parameters at the state that you don't memorize on but it can reduce the complexity of the code
if your base case is in time which is not O(1) so this line must be before it 
int &ret=mem[i];
if(ret==ret)
    return ret;
----------------------------------------------------------------------------------------------------------------------------------------
If at recursion you want a vector to be global on all the sub functions so just intialize it by reference vector< int > &v  but after 
returning from your call just reset every thing as it is with the same order.
----------------------------------------------------------------------------------------------------------------------------------------
At Dp ( Games ) if you want to max or min on diff between 2 players scores 
"int solve(int st,int en)
    {
         if(en-st+1<=0)
            return 0;
            
         int &ret=mem[st][en];
         
         if(ret!=-1)
            return ret;
            
         int p1= v[st] - solve(st+1,en);
         int p2= v[en] - solve(st,en-1);

         ret=max(p1,p2);

         return ret;
    }
"
----------------------------------------------------------------------------------------------------------------------------------------
To define a struct node and do a vector of it globally so you must do typedef of it first
"typedef struct N
{
    int n,l,p;
    N(int n,int l,int p) : n(n),l(l),p(p) {}
}  node ;
vector<node> > v;"
----------------------------------------------------------------------------------------------------------------------------------------
At Dp if there is over lab but there is an element change each time so you can clear the mem[ index of element that will be updated ] 
only and the rest will be as it is offcourse if updating the element doesn't affect the rest
---------------------------------------------------------------------------------------------------------------------------------------
At Dp if you want to indicate a cycle there is a good trick which is first assign the value to the dp as it is a cycle -1 for
example then if you return and visit node you visited before before returning so the dp will be with -1 and returns -1 but if i 
returned it will be assigned to a new value .
code
"ll solve(int id,int f)
{
    if(id<=0||id>n)
        return 0;     if(vis[id][f])
        return arr[id][f];     vis[id][f]=1;
     arr[id][f]=-1;
    if(f)
    {
      ll res=solve(id+v[id],!f);
      if(res==-1)
          arr[id][f]=-1;
      else
        arr[id][f]=v[id]+res;
    }
    else
    {
     ll res=solve(id-v[id],!f);      if(res==-1)
          arr[id][f]=-1;
      else
        arr[id][f]=v[id]+res;
    }
    return arr[id][f];
}
----------------------------------------------------------------------------------------------------------------------------------------
AT DP if the state meaning is there is an answer indicationg by 1 or not indicating by zero and want to print what you take if there is an answer  
the print function look like that
void print(int id,int s)
{
if(id==n+1)
return ;

if(mem[id+1][s]==1)
print(id+1,s);
else
{
sol.pb(id);
print(id+1,(s+arr[id])%k);
}
}
---------------------------------------------------------------------------------------------------------------------------------------
At iterative topological sort you can put the periority reversed so that you will not need to reverse the answer vector at the end 
and the iterative topological sort allow you to know the possible ways of the sorted result array but dfs not
----------------------------------------------------------------------------------------------------------------------------------------
At segement tree with lazy propagation the lazy[root] i need it for all the ranges down the root but above it i already stored it in the tree array 
code
"void update(int idx, int val, int st, int en, int root)
{
  if(idx < st || idx > en)
   return;
  if(st == en)
  {
    tree[root] = val;
    return;
   }
update(idx, val, st, mid, root << 1);
update(idx, val, mid + 1, en, (root << 1) | 1);
tree[root] = tree[root << 1] + tree[(root << 1) |1];
}"
----------------------------------------------------------------------------------------------------------------------------------------
At BFS Don't write vis[n]=1; before the for loop bec it may cause TL or MLE so write it like that
"int BFS1(int sr,int sc,int er,int ec)
{
    q.push(mp(sr,mp(sc,0)));

    while(!q.empty())
    {

      pair<int,pair<int,int> >  cur= q.front();
        q.pop();

        if(cur.first==er&&cur.second.first==ec)
            return cur.second.second;
        vis[cur.first][cur.c]=1;

        for(int i=0;i<=3;i++)
        {
          int  nwr=dr[i]+cur.first; int nwc=dc[i]+cur.second.first;

            if(nwr<0||nwc<0||nwr>=n||nwc>=m||vis[nwr][nwc]||v[nwr][nwc]=='T')
             continue;

             q.push(N(nwr,nwc,cur.cost+1));

        }
    }
}"
---------------------------------------------------------------------------------------------------------------------------------------
Precision, If in a problem he gave you the number of decimal digits after the point , So you can work in an integer domain
--------------------------------------------------------------------------------------------------------------------------------------
You can scan what before the precision point and what after it by   scanf("%d.%d",&bef,&aft);
--------------------------------------------------------------------------------------------------------------------------------------
At dp with memorization if yu throw a certain flag and it may be added to some value and you want it to be not added so minize
code
int ret = min(50000, n + solve(a, b));   // 50000 is the flag
---------------------------------------------------------------------------------------------------------------------------------------
If you are getting the distance between two points and you are just comparing so get it squared To avoid percision errors
---------------------------------------------------------------------------------------------------------------------------------------
Using the lower bound and the upper bound 
to use them the vector must be sorted ascendingly 
the upper bound ---------------->  get the first number that is greater than the val
the lower bound ---------------->  get the first number that is equal or greater than the val
IF you sort the vector decsendingly 
the upper bound ---------------->  get the first number that is smaller than the val
the lower bound ---------------->  get the first number that is equal or smaller than the val
----------------------------------------------------------------------------------------------------------------------------------------
Sending a vector to a function 
by value   if you are updating in it and don't want this to happen in the orginal vector but time wise and memory wise it is a cost
eg   void fun(vector<int> v)
by refernece but here you are updating in the orginal vector
eg  void fun(vector<int> &v)
----------------------------------------------------------------------------------------------------------------------------------------
MOD is very expensive tool if you can without it it would be better
---------------------------------------------------------------------------------------------------------------------------------------
Zero is stored in The computer zero or very small -ve value or very small +ve value that's why when you are comparing a double value 
less than zero or not compare with -ve eps and when are comparing greater than zero or not compare with eps
---------------------------------------------------------------------------------------------------------------------------------------
IF i have a undirected graph you can turn it to a directed graph by splitting each vertex V-V' and set a directed edge from V to V'
So if you have a an edge in the undirected graph V-U it will be V'-U and U'-V.
----------------------------------------------------------------------------------------------------------------------------------------
Any Tree can be seprated in to two disjoint partions by breaking an edge
----------------------------------------------------------------------------------------------------------------------------------------
To get the longest path you can invert all the weights on the edges to -ve then get the shortest path.
----------------------------------------------------------------------------------------------------------------------------------------
The meaning of a weighted edge is that whenever you pass throught it ypu will but its cost again and a gain...
----------------------------------------------------------------------------------------------------------------------------------------
Learn to use priority queue instead of set as it has better complexity
----------------------------------------------------------------------------------------------------------------------------------------
Time Obtimizations
1- if there is a value which is zero or one only define it as boolean, which take less time at memory reg
2- Try to obtimize in constant time of code.
3- there is some obtimizations that affect the averge complexity time not worest case do it sometimes it helps to AC the problem
4- use scanf/printf instead of cin/cout
----------------------------------------------------------------------------------------------------------------------------------------
DP obtimization : there is sometimes things in the Dp recurrance can get the problem AC eg
1- like if i am searching on a certain length, if exceeds return
2- At Dp if you are searching for a result or not and you want the min answer just traverse a sorted array and once you find a result 
return.
----------------------------------------------------------------------------------------------------------------------------------------
If you want to know if a certain node is in the subtree of a certain root put for every node start integer when you enter it and end 
integer when you exist from it and then just check if the node st and en is between the range of the st and end of the root so it is
in the same sub tree else it will be out of its subtree.
----------------------------------------------------------------------------------------------------------------------------------------
Instead of clearing a vis array every loop just put a value and make it the visited value only for every loop.
----------------------------------------------------------------------------------------------------------------------------------------
If you want to make a frequencey array of large numbers map them first to smaller numbers and then do the vis array
----------------------------------------------------------------------------------------------------------------------------------------
If you want to get the number of paths in a tree so if there is an edge from U to V then (the number of nodes under the V sub tree) 
multiplied by the (total number of nodes - the number of nodes under the V sub tree )
----------------------------------------------------------------------------------------------------------------------------------------
If you want to know the number of paths with odd edges then multiply the number of nodes at even level and the number of nodes at odd
level assume we start from level zero.
----------------------------------------------------------------------------------------------------------------------------------------
If you want to just know whether there is an answer or not and you counting all the number of ways and the number of ways may become too
big so MOD the answer with 1e9+7 
----------------------------------------------------------------------------------------------------------------------------------------
To get a set of unique elements that every member of it occurs at least X times, loop on the array and once the occurance of an element
reach exactly X take it.
----------------------------------------------------------------------------------------------------------------------------------------
If you have an undirected graph and you want to know whether the edge AB that involved in the path from S to T is AB or BA consider
both of them and take the min in length.
----------------------------------------------------------------------------------------------------------------------------------------
If you have a start binary number and an end binary number and you want to get the number of numbers between start and end but this 
range can be overflowed in long long.
CODE
----
string s,t,tend="",tstart="";
ll MX=1000000000; // MX is the max number you care a bout in the range
ll n;
int main()
{
    cin>>n>>start>>End;
    ll pre=1;
    for(int i=0;i<n;i++)
    {
        tstart+=start[i];
        tend+=End[i];
        if(tstart[i]=='0'&&tend[i]=='1')
            pre= min(MX,pre*2);
        else if(tstart[i]=='1'&&tend[i]=='0')
            pre= min(MX,(pre-2)*2+2);
        else
        {
             if(pre>1)
            pre= min(MX,(pre-1)*2+1);
        }
        // pre is the difference between start till ith char and end till ith char of the binary numbers
    }
}
----------------------------------------------------------------------------------------------------------------------------------------
IF you have a sorted list of integers let it be A and for each ith number you want the elements smaller than it from another list 
let it be B.
solutions 
1-use multiset to store B elements then do upper_bound on the set for the ith element value and the subtract one from id to the number
of elements lower than ith element. O(nlogn)
2-use priority_queue to get the smallest element so if it is smaller than the smallest element in list A so it is smaller than all 
remaining elements and move on.   O(n)+some constant
3- use 2-pointers technique move on list B till the value become greater than the ith element in list A then stop those are the elements
that are smaller than the ith element in list A and move again from the current pointer and so on. O(n)
----------------------------------------------------------------------------------------------------------------------------------------
At segment tree if you are returning from invalid state eg if(b<str||a>end) return; and you are returning the index of the min
element then return n and put at index of n in the array large value.
----------------------------------------------------------------------------------------------------------------------------------------
IF you are moving in a grid by a ceratin sequence for example left then up then right then down then left a gain note the cycle and 
create dcol[] and drow[] arrays in it the next move i should make according to the cycle, this helps a lot to avoid writing longer code
and more bugs.
----------------------------------------------------------------------------------------------------------------------------------------
If you are dealing with doubles and you sort using STL won't let you avoid percision problems but using cmp function will let you a void 
precision problems by using dcmp().
----------------------------------------------------------------------------------------------------------------------------------------
Try always to work in integer domain eg x/sqrt(n) < d = (x^2) < d*d*n
----------------------------------------------------------------------------------------------------------------------------------------
suppose i have a double value d and i want to map it to something
When you want to map from double to something this may cause WA due to precision errors you can multiply d by 10^9 to get it integer
but take care this range up to long long only and if there is still precision round it.
----------------------------------------------------------------------------------------------------------------------------------------
If you are upper_bound on vector of doubles on a val write it val+eps.
If you are lower_bound on vector of doubles on a val write it val-eps.
----------------------------------------------------------------------------------------------------------------------------------------
If you want to get the path from node to node in dfs and return if there is a path or not.
bool dfs(int no)
{
    if(no==Target)
        return true;
    vis[no]=1;
    for(int i=0;i<sz(v[no]);i++)
    {
        int nw=v[no][i];
        if(vis[nw])
            continue;
        path.pb(nw);
        bool ret=dfs(nw);
        if(ret==true)
            return true;
        path.pop_back();
    }
    return false;
}
----------------------------------------------------------------------------------------------------------------------------------------
there is a trick instead of clearing the vis array just assign a visID for each time, Note don't start the visID with zero.
----------------------------------------------------------------------------------------------------------------------------------------
Sometimes in the problems he says that it is granteed that the answer won't exceed M , where M a certain integer.
okay that doesn't mean that during calculating the answer the value won't exceed M so it may exceeds M, the overflow will cause the
value of integer to return back to INT_MIN so if you are maxmizing it doesn't matter if an overflow happens but if you are minmizing
you have to takecare to handel that if the answer exceeds M then put it to its limit which is M because this will affect the answer.
----------------------------------------------------------------------------------------------------------------------------------------
When the problem says in the output format : accurate to 2 fractional digits.
means approximated to the nearest 2 digits, eg 5.5555 = 5.56 .
ans= (round(ans*100.0))/100.0
----------------------------------------------------------------------------------------------------------------------------------------
When you are dealing with doubles instead of writing ans= ans*100 write ans= ans*100.0
----------------------------------------------------------------------------------------------------------------------------------------
-Take care if you have a matrix nxm and you want to take all the diagonals start from each row and move (r-1,c+1) where r for 
rows and c for columns and start from column number two at last from to column number m.
----------------------------------------------------------------------------------------------------------------------------------------
When you are uniqe a vector it is better to use resize than erase bec erase may cause RTE if unique iterator is vec.end().
sort(all(vec));
vec.resize(unique(all(vec))-vec.begin());
----------------------------------------------------------------------------------------------------------------------------------------
If you are comparing between values that may overflow, a>= x*y , where x*y may overflow so write a/x >= y 
----------------------------------------------------------------------------------------------------------------------------------------
When you convert decimal to binary make sure that you did it with the max number of bits that could happen eg 32 bit or whatever.
good way :
const int N=30;
bitset<N> b(X);
for(int i=0;i<30;i++)
  b[i] // is the ith bit of the decimal number X, it is in the right order when i=0 means the bit 2^0.
----------------------------------------------------------------------------------------------------------------------------------------
 Takecare dfs on a tree differs from a graph even if it is DAG, at tree you will never visit the same node except by
 moving to the parent, but at DAG you will visit the same node using forward/cross edges, so at graph you have to use vis array.
----------------------------------------------------------------------------------------------------------------------------------------
trick to switch between the values of flag F which is 1 or 2 is F = 3-F.
----------------------------------------------------------------------------------------------------------------------------------------
If you have from 1 to n nodes each have an edge to all the other nodes (from 1 to n) with a fixed cost so there is
a trick to reduce the number of total edges put a virtual node and connect it by a direct edge to from 1 to n nodes and connect each
of the nodes from 1 to n to it by a direct edge with that fixed cost.
----------------------------------------------------------------------------------------------------------------------------------------
























































































































































































































