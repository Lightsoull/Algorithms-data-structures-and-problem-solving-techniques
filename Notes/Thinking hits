 try to get observations closer to what you want in somehow not random observations.
-----------------------------------------------------------------------------------------------------------------------------------------
once you get an idea spend time verify it and see for corner cases and if it fit or not 
----------------------------------------------------------------------------------------------------------------------------------------
at dp when it has a loop at main to know whether its counted as a nested complexity or not look at the table it self i mean the
array mem how it fills :).
----------------------------------------------------------------------------------------------------------------------------------------
instead of doing something then check its correctness do it right from the begining if you can
----------------------------------------------------------------------------------------------------------------------------------------
some times getting totally out of an idea you stucked in and think from another view helps
----------------------------------------------------------------------------------------------------------------------------------------
When you verify if there is a cycle check when it is even and when it is odd
----------------------------------------------------------------------------------------------------------------------------------------
if you feel stucking in a problem try on very small samples then larger and so on.....
----------------------------------------------------------------------------------------------------------------------------------------
Sometimes you can proof by contradictions.
----------------------------------------------------------------------------------------------------------------------------------------
Sometimes you can move to the answer by assuming and proof.
----------------------------------------------------------------------------------------------------------------------------------------
Check when the answer will be zero if you count
----------------------------------------------------------------------------------------------------------------------------------------
When you think about a code make sure it applies your idea
----------------------------------------------------------------------------------------------------------------------------------------
Try to think simbolliaclly espically with probability or math problems 
----------------------------------------------------------------------------------------------------------------------------------------
In probability if you want an expectation of some thing for example E(cost) you can think of the calculation of the cose equation 
itself then by linearity of expectation you can get the equation of the expectation as well
----------------------------------------------------------------------------------------------------------------------------------------
Some times if you stuck flip your thinking 180 degree
----------------------------------------------------------------------------------------------------------------------------------------
Think in the process when it is done what is the problem should look like
----------------------------------------------------------------------------------------------------------------------------------------
Dont think as black or white for eample your idea may be partially correct so if you see some thing wrong with it dont distroy it 
all but update it or divide it to cases
----------------------------------------------------------------------------------------------------------------------------------------
if you stucked simulate alot of examples :)
----------------------------------------------------------------------------------------------------------------------------------------
take time to verify your ideas
----------------------------------------------------------------------------------------------------------------------------------------
think in the structure of the code
----------------------------------------------------------------------------------------------------------------------------------------
Spend more time thinking in the actual complexity taken
----------------------------------------------------------------------------------------------------------------------------------------
When you want to reach an end from some start and you want to know the start try to think reversley from the end up to the start
----------------------------------------------------------------------------------------------------------------------------------------
If you are in a problem that two players play againest each other each one wants the opposite of the other so  just let each one play 
for what he want the get the answer
----------------------------------------------------------------------------------------------------------------------------------------
Dijkstra allows me to min with updating the distance inside it 
----------------------------------------------------------------------------------------------------------------------------------------
At Dp with graph if the graph is cyclic but your state contain another parameter that lead the recurrence to be not cyclic so you can 
use dp
----------------------------------------------------------------------------------------------------------------------------------------
At Segment tree Don't go to range except when yu are sure 100% that there is answer inside it
----------------------------------------------------------------------------------------------------------------------------------------
Try to think in the code structure and optimize it in the size
----------------------------------------------------------------------------------------------------------------------------------------
implement the code completely on paper not just a part
----------------------------------------------------------------------------------------------------------------------------------------
when find a problem in your idea try to solve it Don't discard the whole idea once you find a problem with it 
----------------------------------------------------------------------------------------------------------------------------------------
Sometimes doing what is wrong and correct it later is easier than avoiding doing what is wrong
----------------------------------------------------------------------------------------------------------------------------------------
Learn to switch your thinking in many other directions after spending time thinking in a way and failed
----------------------------------------------------------------------------------------------------------------------------------------
If you have an observation on a fixed range but the rest you have no thing on it so you can work with your observation and the rest of 
the range you can brudeforce
----------------------------------------------------------------------------------------------------------------------------------------
Try to think in sub problems of the big problem seprately
----------------------------------------------------------------------------------------------------------------------------------------
If you stuck restate the problem from the begining again
----------------------------------------------------------------------------------------------------------------------------------------
If you are searching for something think what if you don't find it 
----------------------------------------------------------------------------------------------------------------------------------------
Switching your thinking in  other direction, this direction may be not totally different
----------------------------------------------------------------------------------------------------------------------------------------
Try to think in an opposite way of the problem
----------------------------------------------------------------------------------------------------------------------------------------
Some times you can think in a path which is right but the children of this path is not right
----------------------------------------------------------------------------------------------------------------------------------------
Try to think in general not on a specific case or idea, in other words try to generalize your idea
----------------------------------------------------------------------------------------------------------------------------------------
Treat dijkstra state as dp state
----------------------------------------------------------------------------------------------------------------------------------------
learn to partitionate the problem
----------------------------------------------------------------------------------------------------------------------------------------
Don't look for the problem from a certain topic or idea look to it in general 
----------------------------------------------------------------------------------------------------------------------------------------
Takecare of linearity of expectation
----------------------------------------------------------------------------------------------------------------------------------------
If you are comparing two ranges there is 4 possibilities
1- first inside second
2-second inside first
3-take part from end
4-take part from beginng
----------------------------------------------------------------------------------------------------------------------------------------
You can know the number of operations to do something by the exact complexity of its code - Must be Exact  -
----------------------------------------------------------------------------------------------------------------------------------------
learn to mark the subproblems that a problem contains and start to think in them one by one
----------------------------------------------------------------------------------------------------------------------------------------
At geometry problems think of a way to solve without much percision errors
----------------------------------------------------------------------------------------------------------------------------------------
Verify alot
----------------------------------------------------------------------------------------------------------------------------------------
List your ways to solve and go through each one till the end
----------------------------------------------------------------------------------------------------------------------------------------
Understand the real meaning of the problem
----------------------------------------------------------------------------------------------------------------------------------------
Try sometimes to think in totally different interpertation for the problem
----------------------------------------------------------------------------------------------------------------------------------------
if you have a certain problem with a TLE solution for example your solution is AC if n<10 else its TL and n up to 15 so you can 
just compute the above 10 and put the result manually in an array 
----------------------------------------------------------------------------------------------------------------------------------------
At implementation things can be not handeled exactly
----------------------------------------------------------------------------------------------------------------------------------------
if you are thinking by examples try large ones as much as possible
----------------------------------------------------------------------------------------------------------------------------------------
At Dp You can think of a problem simbollically as a functions
----------------------------------------------------------------------------------------------------------------------------------------
If you want to get the max sum of a sub array you can do it with sliding window but if it can be a subsequence so it can't be 
sliding window
----------------------------------------------------------------------------------------------------------------------------------------
When you observe that this subtask is impossible return back a step
----------------------------------------------------------------------------------------------------------------------------------------
Try to cut the space into parts
----------------------------------------------------------------------------------------------------------------------------------------
Verfity some more time
----------------------------------------------------------------------------------------------------------------------------------------
You may change the way of writing the code to over come a bug yu don't know
----------------------------------------------------------------------------------------------------------------------------------------
Verfiy your thougths that make the problem harder
----------------------------------------------------------------------------------------------------------------------------------------
if you are minmizing or maximaizing think of the worest case and the best case
----------------------------------------------------------------------------------------------------------------------------------------
Try to think for a very small sample and then grow it up
----------------------------------------------------------------------------------------------------------------------------------------
try to think in a mathematical form
----------------------------------------------------------------------------------------------------------------------------------------
When the problem asks you to perform certain thing in less than or equal a certain a mount of steps try to think of a constructive 
algorithsm 
----------------------------------------------------------------------------------------------------------------------------------------
Try sometimes to see things from a reversed side
----------------------------------------------------------------------------------------------------------------------------------------
When you draw a tree take care of drawing different cases
1- multi edges
2- directly to the root and not directly to the root
----------------------------------------------------------------------------------------------------------------------------------------
Learn to think overall thinking, for example what will happen to the graph after  applying those operations.
----------------------------------------------------------------------------------------------------------------------------------------
At Dp Learn to look to the problem from different recurrances points of view 
----------------------------------------------------------------------------------------------------------------------------------------
Think of a reduction to a problem 
----------------------------------------------------------------------------------------------------------------------------------------
Think BrudeForce and see whether it could fit in time or not
----------------------------------------------------------------------------------------------------------------------------------------
When you have different things that you need to adjust then you can fix something and work  on the others
----------------------------------------------------------------------------------------------------------------------------------------
when you have a lot of variables learn to fix some and work on the others
----------------------------------------------------------------------------------------------------------------------------------------
When you think dp think dp iterative
----------------------------------------------------------------------------------------------------------------------------------------
IF you are calculating the result for a range you can try to find the result for one value and then try to find the result of two values
interms of finding the value for one value then build up you could find the result for all the range.
eg
i have function f(x) for integer x and i want to find the result for f(p1*p2*p3)
first calculate f(p1) let it be equal to p1*4+2 then 
calculate f( p1*p2 ) let it be equal to  f(p1)*f(p2)*4 
so here i could build up the solution with a simple for loop .
-----------------------------------------------------------------------------------------------------------------------------------------
At geometry problems verify alot there will be a lot of cases.
-----------------------------------------------------------------------------------------------------------------------------------------
When you are drawing a geometric shape in a grid and you feel confused imagine that each grid cell is just a dot.
----------------------------------------------------------------------------------------------------------------------------------------
Think of how you will write the code, don't just go and write it.
----------------------------------------------------------------------------------------------------------------------------------------
Learn to divide the problem into subproblems and simplifiy it.
----------------------------------------------------------------------------------------------------------------------------------------
Sometimes it is easier to fix some parameter and brudeforce on it, if the complexity allows you to do so.
----------------------------------------------------------------------------------------------------------------------------------------
Try sometimes to generalize your thinking, like see the situation from a higher demension.
----------------------------------------------------------------------------------------------------------------------------------------
Thinking when you think don't think 0/1 which means don't think if a certain thing may occur 1 time or 0 time because it may
occur 2,3,4,N times.
----------------------------------------------------------------------------------------------------------------------------------------
Greedy proof for yes/no questions:
let your solution is a white circle, white means correct and black means wrong if your solution is exactly correct that means all 
around the white circle must be black which means that every thing you don't consider it true is wrong and there is no black
in your circle which means there is no wrong in your solution.
----------------------------------------------------------------------------------------------------------------------------------------
If i have a list of numbers and every time i choose some number to be in setA or setB and there is no number is left without assigning 
then if i know what is in setA then i will know what is in setB.
----------------------------------------------------------------------------------------------------------------------------------------
If you have a certain pattern and you doubt a certain feature with it you can just brude force and check.
----------------------------------------------------------------------------------------------------------------------------------------
Try to simplifity the problem even if you can solved in a harder form for the seek of the time.
----------------------------------------------------------------------------------------------------------------------------------------
Try so formualte the problem, example if the problem depends on assigning some variables try to take the variables as variables
and get relations/equations what ever.
----------------------------------------------------------------------------------------------------------------------------------------
If you want to max or min something and it can be written in the form of a fraction write it in that form and see.
--------------------------------------------------------------------------------------------------------------------------------------
Think brudeforce before greedy and take time verfiy that if it could be brudeforce or not before switching to greedy
because greedy is harder.
--------------------------------------------------------------------------------------------------------------------------------------
When you think Dp think memorization and iteration(as a equation relation).
--------------------------------------------------------------------------------------------------------------------------------------
Greedy notes: 
-if some observation works on some kinds of examples then that doesn't mean it works for all.
-to verfiy some greedy solution try to get examples where it doesn't work.
--------------------------------------------------------------------------------------------------------------------------------------
when you think Dp think in different recurrances not only in fixed one.
--------------------------------------------------------------------------------------------------------------------------------------
Try to think from small to big or opposite in (simulation patterns)
----------------------------------------------------------------------------------------------------------------------------------------
Don't think on one exmaple.
----------------------------------------------------------------------------------------------------------------------------------------
Don't try to match directly a problem to old one.
----------------------------------------------------------------------------------------------------------------------------------------
Sum of number of divisors of numbers from 1 to 10^5 is not <= sqrt(10^5) bec yes for each number from them will loop at most sqrt(10^5)
to get its divisors but i will sum up them, so the number of dintinct divisors of elements from 1 to 10^5 is 10^5 simply
bec each number is the divisor of itself.
----------------------------------------------------------------------------------------------------------------------------------------
If it is required in a problem to construct a certain array witha certain conditions, think in constructing another array that is
can be made by the orginal and you can get the orginal array from it. eg prefix of array,suffix of array.
----------------------------------------------------------------------------------------------------------------------------------------
When you have n and you want to choose i (i from 0 to m) every time and you summing up the number of ways to choose for each i
, that sum is 2^n like for every one from n you will decide whether to choose it or not.
----------------------------------------------------------------------------------------------------------------------------------------
List the unknowns and the unknowns infront of you on the drawing to observe.
----------------------------------------------------------------------------------------------------------------------------------------
When you have a range of numbers from L to R and you want the count of pairs between L and R such that a certain condition holds for 
both numbers then you can think of the relation between the pairs and the conditions.
----------------------------------------------------------------------------------------------------------------------------------------
A grid is 4-connected means it every cell is connected to its four neigbors only.
----------------------------------------------------------------------------------------------------------------------------------------
At that kind of problems: you have a string S and at each step S="B"+S+"P"+S+"B", and you given the number of steps to perform eg 50
and required to print the number of 'p' in the first X chars of the resultant string.
sol:
try to divide the problem into parts eg at step i s[i]= "B" + s[i-1] + "p" + s[i-1] + "B", so if the the rem taken chars from the 
begining is 1 then there is remaing "B" if it is more then whether i will go to the first s[i-1] or to the next s[i-1] or i will have
the complete range and so on and that will cost a comlexity O(steps).
----------------------------------------------------------------------------------------------------------------------------------------
when you have a grid and want the number of valid grids that could be generated given some property so it is dp or simulation
1- try dp if can't.
2- simulation write brude force and then observe.
----------------------------------------------------------------------------------------------------------------------------------------
if there is O(n^2) way to get the solution and you try to make in O(n) so you move from the left to the right calculating the answer 
for the first sub array and try to calculate the answer for the second sub array from the first one this way can be done but also
can't be done sometimes so in that case try the opposite move from the right to the left and calculate the answer for the last subarray
and from it calculate the answer for the one before it and so on.
----------------------------------------------------------------------------------------------------------------------------------------
Think of the general form of the problem.
----------------------------------------------------------------------------------------------------------------------------------------
If the solution is greedy try simbolic thinking, for example if you are given n persons from [1 to n] and want to order them so that
some conditions must occur so you could think what if they are already ordered as a permutation p1, p2,...,pn and start thinking from 
here.
----------------------------------------------------------------------------------------------------------------------------------------













