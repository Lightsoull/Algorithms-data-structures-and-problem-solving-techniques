/*
Explanation: the co-ordinates is zero based so i will turn them to one based then i will express the walls as a XY-plane co-ordinates
m is rows, n is columns ,grid[x][y], then i will mark all the walls and do dp to get the stuck cells.
*/
#include <bits/stdc++.h>
#define sz(v)   ((int)(v).size())
#define  all(v)    ((v).begin()),((v).end())
#define  allr(v)    ((v).rbegin()),((v).rend())
#define   pb         push_back
#define   mp         make_pair
#define   mt         make_tuple
//#define   Y            imag()
//#define   X            real()
#define    clr(v,d)      memset( v, d ,sizeof(v))
#define   angle(n)      atan2((n.imag()),(n.real()))
#define   vec(a,b)       ((b)-(a))
//#define   length(a)      hypot( (a.imag()),(a.real()) )
#define   normalize(a)      (a)/(length(a))
//#define    dp(a,b)          (((conj(a))*(b)).real())
//#define    cp(a,b)          (((conj(a))*(b)).imag())
#define    lengthsqrt(a)       dp(a,a)
#define    rotate0( a,ang)    ((a)*exp( point(0,ang) ))
#define    rotateA(about,p,ang)   (rotate0(vec(about,p),ang)+about)
#define    lcm(a,b)                ((a*b)/(__gcd(a,b)))
#define    reflection0(m,v)         (conj((v)/(m))*(m))
#define     reflectionA(m,v,p0)     (conj( (vec(p0,v))/(vec(p0,m)) ) * (vec(p0,m)) ) + p0
//#define     same(p1,p2)               ( dp(  vec(p1,p2),vec(p1,p2)) < eps )
#define     PT                    complex<double>
#define outfile freopen("out.out", "w", stdout);
#define infile  freopen("in.in", "r", stdin);
#define PI acos(-1)
typedef  long long     ll ;
typedef  unsigned long long ull;
const double eps= (1e-9);
using namespace std;
int dcmp(long double a,long double b){   return fabsl(a-b)<=eps ? 0: (a>b)? 1:-1  ;}
int getBit(int num, int idx) {return ((num >> idx) & 1) == 1;}
int setBit1(int num, int idx) {return num | (1<<idx);}
ll setBit0(ll num, int idx) {return num & ~(1ll<<idx);}
ll flipBit(int num, int idx) {return num ^ (1<<idx);}
void FS(){ ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);}
int countNumBit1(int mask) {int ret=0; while (mask)     {mask &= (mask-1);++ret;    }return ret;}
const int N=2009;
int ix[N],iy[N],lx[N],ly[N],rx[N],ry[N];
int grid[N][N];
int dp[N][N];
int main()
{
    int n,m,w,cs=1;
    while(1)
    {
        cin>>m>>n>>w;
        if(n==0&&m==0&&w==0)
            break;

        map<int,int> mx,my;

        mx[0]=0; my[0]=0; mx[n]=0; my[m]=0;
        for(int i=0;i<w;i++)
        {
            cin>>lx[i]>>ly[i]>>rx[i]>>ry[i];
            lx[i]++; ly[i]++; rx[i]++; ry[i]++;

            lx[i]--;
            ly[i]--;

            mx[lx[i]]=0; my[ly[i]]=0; mx[rx[i]]=0; my[ry[i]]=0;
        }
        int X=0;
        for(auto it=mx.begin();it!=mx.end();it++)
        {
            (*it).second=X;
            ix[X]=(*it).first;
            X++;
        }
        int Y=0;
        for(auto it=my.begin();it!=my.end();it++)
        {
            (*it).second=Y;
            iy[Y]=(*it).first;
            Y++;
        }

        clr(grid,0);
        for(int i=0;i<w;i++)
        {
                int rry=my[ry[i]];
                for(int k=mx[lx[i]]+1;k<=mx[rx[i]];k++)
                {
                    grid[k][rry]=1;
                }

        }

        clr(dp,0);
        dp[X-1][Y-1]=1;
        ll ans=0;
        for(int i=X-1;i>0;i--)
        {
            for(int j=Y-1;j>0;j--)
            {
                if(grid[i][j])
                    continue;
                if(dp[i][j]==0)
                    ans+= 1ll*(ix[i]-ix[i-1])*(iy[j]-iy[j-1]);

                dp[i][j-1]|=dp[i][j];
                dp[i-1][j]|=dp[i][j];
            }
        }

        cout<<"Case "<<cs++<<": "<<ans<<endl;
    }

}
