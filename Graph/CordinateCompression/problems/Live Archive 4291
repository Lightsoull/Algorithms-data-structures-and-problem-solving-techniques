#include <bits/stdc++.h>
#define sz(v)   ((int)(v).size())
#define  all(v)    ((v).begin()),((v).end())
#define  allr(v)    ((v).rbegin()),((v).rend())
#define   pb         push_back
#define   mp         make_pair
#define   mt         make_tuple
//#define   Y            imag()
//#define   X            real()
#define    clr(v,d)      memset( v, d ,sizeof(v))
#define   angle(n)      atan2((n.imag()),(n.real()))
#define   vec(a,b)       ((b)-(a))
//#define   length(a)      hypot( (a.imag()),(a.real()) )
#define   normalize(a)      (a)/(length(a))
//#define    dp(a,b)          (((conj(a))*(b)).real())
//#define    cp(a,b)          (((conj(a))*(b)).imag())
#define    lengthsqrt(a)       dp(a,a)
#define    rotate0( a,ang)    ((a)*exp( point(0,ang) ))
#define    rotateA(about,p,ang)   (rotate0(vec(about,p),ang)+about)
#define    lcm(a,b)                ((a*b)/(__gcd(a,b)))
#define    reflection0(m,v)         (conj((v)/(m))*(m))
#define     reflectionA(m,v,p0)     (conj( (vec(p0,v))/(vec(p0,m)) ) * (vec(p0,m)) ) + p0
//#define     same(p1,p2)               ( dp(  vec(p1,p2),vec(p1,p2)) < eps )
#define     PT                    complex<double>
#define outfile freopen("out.out", "w", stdout);
#define infile  freopen("in.in", "r", stdin);
#define PI acos(-1)
typedef  long long     ll ;
typedef  unsigned long long ull;
const double eps= (1e-9);
using namespace std;
int dcmp(long double a,long double b){   return fabsl(a-b)<=eps ? 0: (a>b)? 1:-1  ;}
int getBit(int num, int idx) {return ((num >> idx) & 1) == 1;}
int setBit1(int num, int idx) {return num | (1<<idx);}
ll setBit0(ll num, int idx) {return num & ~(1ll<<idx);}
ll flipBit(int num, int idx) {return num ^ (1<<idx);}
void FS(){ ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);}
int dx[]={1,0,0,-1,0,0};
int dy[]={0,1,0,0,-1,0};
int dz[]={0,0,1,0,0,-1};
int grid[160][160][160],vis[160][160][160];
int X,Y,Z;
bool V(int x,int y,int z)
{
    return (x>=0&&x<X&&y>=0&&y<Y&&z>=0&&z<Z);
}
void dfs(int x,int y,int z)
{
    vis[x][y][z]=1;
    grid[x][y][z]=0;
    for(int i=0;i<6;i++)
    {
        int nx=x+dx[i];
        int ny=y+dy[i];
        int nz=z+dz[i];

        if(!V(nx,ny,nz)||vis[nx][ny][nz]||grid[nx][ny][nz]==1)
            continue;

        dfs(nx,ny,nz);
    }
}
int main()
{
    int T;
    cin>>T;

    while(T--)
    {
        int n;
        cin>>n;
        int xl[59],yl[59],zl[59],xr[59],yr[59],zr[59],ix[160],iy[160],iz[160];
        map<int,int> mx,my,mz;
        mx[-505]=0;
        my[-505]=0;
        mz[-505]=0;
        mx[505]=0;
        my[505]=0;
        mz[505]=0;
        for(int i=0;i<n;i++)
        {
            int x,y,z;
            cin>>xl[i]>>yl[i]>>zl[i]>>x>>y>>z;
            xr[i]= xl[i]+x;
            yr[i]= yl[i]+y;
            zr[i]= zl[i]+z;

            mx[xl[i]]=0;
            mx[xr[i]]=0;

            my[yl[i]]=0;
            my[yr[i]]=0;

            mz[zl[i]]=0;
            mz[zr[i]]=0;
        }

        X=0;
        for(auto it=mx.begin();it!=mx.end();it++)
        {
            (*it).second=X;
            ix[X]=(*it).first;
            X++;
        }

        Y=0;
        for(auto it=my.begin();it!=my.end();it++)
        {
            (*it).second=Y;
            iy[Y]=(*it).first;
            Y++;
        }

        Z=0;
        for(auto it=mz.begin();it!=mz.end();it++)
        {
            (*it).second=Z;
            iz[Z]=(*it).first;
            Z++;
        }
        for(int i=0;i<X;i++)
        {
            for(int j=0;j<Y;j++)
            {
                for(int k=0;k<Z;k++)
                {
                    grid[i][j][k]=2;
                }
            }
        }
        for(int i=0;i<n;i++)
        {
            int sx= mx[xl[i]];
            int ex= mx[xr[i]];
            int sy= my[yl[i]];
            int ey= my[yr[i]];
            int sZ= mz[zl[i]];
            int eZ= mz[zr[i]];

            for(int j=sx;j<ex;j++)
            {
                for(int k=sy;k<ey;k++)
                {
                    for(int l=sZ;l<eZ;l++)
                    {
                        grid[j][k][l]=1;
                    }
                }
            }
        }
        clr(vis,0);
        dfs(0,0,0);


        ll volume=0,area=0;
        for(int i=0;i<X-1;i++)
        {
            for(int j=0;j<Y-1;j++)
            {
                for(int k=0;k<Z-1;k++)
                {


                    int x= ix[i+1]-ix[i];
                    int y= iy[j+1]-iy[j];
                    int z= iz[k+1]-iz[k];
                //    cout<<grid[i][j][k]<<endl;
                    if(grid[i][j][k])
                    {
                        volume+= x*y*z;
                    }

                    if(grid[i][j][k]+grid[i+1][j][k]==1)
                        area+= z*y;
                    if(grid[i][j][k]+grid[i][j+1][k]==1)
                        area+= z*x;
                    if(grid[i][j][k]+grid[i][j][k+1]==1)
                        area+= x*y;

                }
            }
        }

      cout<<area<<" "<<volume<<endl;
    }
}




