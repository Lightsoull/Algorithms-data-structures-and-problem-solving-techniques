Learned source: mostafa saad two videos.
Notes about maxFlow solution
1- the capicity on the edge must be +ve non-zero.

Notes regarding MaxFlow-MinCut problems
- Min Cut in an undirected graph with weights on nodes Will be to set an edge between a node and another version of it with the
weight and To put the undirected edge
v[f+n][t]=w;
v[t+n][f]=w;

- If the weights are on nodes itself you must to node split trick.
----------------------------------------------------------------------------------------------------------------------------------------
Max flow
- augmenting path means a pathin the flow.
- we are talking a bout a directed graph each edge represent a road with a certain capicity ( imagine it like a pipe or a the max
load that edge can bear).
- if its undirected graph there is no problem put the edges as it is.
- we have a source(S) and a desitination called sink.
- the difference between path and flow that the flow consists of one or more paths from source to destination.
- MaxFlow means the max flow of water for example from a source to the destination through the edges(pipes), In other words the max
amount of water to reach the destination from the source.

Min Cut
- its like if i have a directed graph and i need sepreate all the ways from the Source to the destination by breaking some edges and 
every edge have a cost to be breaked and i want to do that with the min cost.

- the Min Cut problem is the same as the Maxflow problem problem, bec the if there is a edge from 1 to 2 with weight 4 and from 2 to 3 
with weight 10 the water that will pass is the min between them which is 4 and the min cut is also 4.
----------------------------------------------------------------------------------------------------------------------------------------
Implementation
By Ford-Fulkerson's method
Steps
-find a path from source to destination then all the edges used in that path subtract them from the min of that path edges and add
this min edge cost to the reverse edge.
Explanation
it is like moving in a path and the reverse edge represents the cancelation of a certain move and taking other move instead.
Complexity : it works to edges up to 10^4 and edge cost 10^5 and nodes 800.
CODE
#define MAXN 700     		//maximum number of nodes
int cap[MAXN][MAXN]; 		//capacity
int n;						//number of nodes
int path[MAXN];
int pathLength;
bool visited[MAXN];

// Implement in anyway that get a path: DFS, BFS, Dijkstra...whatever
int getPath(int StartNode,int TargetNode,int curLen,int maxcap)
{
	path[curLen]=StartNode;
	if (StartNode==TargetNode) 
	{
		pathLength=curLen+1;
		return maxcap;
	}
	
	int ret = 0;
	visited[StartNode]=true;
	
	for(int i=0;i<n;i++)
	{		
		if (visited[i] || cap[StartNode][i]<=0) continue;
		
		ret = getPath(i, TargetNode,curLen+1, min(maxcap,cap[StartNode][i]));
		
		if (ret>0) break;	// We found a path with flow
	}
	return ret;
}

int maxFlow(int src, int sink)
{
	int total_flow = 0;

	while(1)
	{
		memset(visited,0,sizeof(visited));
		int newflow=getPath(src,sink,0,INT_MAX);
		
		if (!newflow) break;	// once no more paths, STOP
		
		for(int i=1;i<pathLength;i++)
		{
			int m=path[i-1],n=path[i];
			
			cap[m][n]-=newflow;
			cap[n][m]+=newflow;		// Add reversed edge
		}
		total_flow+=newflow;
	}
	
	return total_flow;
}
----------------------------------------------------------------------------------------------------------------------------------------
Max Flow Applications

1- MaxEdgeDisjointPath ( the max number of paths from source to destination that doesn't share any edges )
To solve it, put all the weights with 1 then run MaxFlow and the amount of flows is the amount of paths 
---------------------------------------------------------------------------------------------------------------------------------------
2-MaxEdgeAndVertexDisjointPath ( the max number of paths from source to destination that doesn't share any edges and any vertexes )
To solve it,first put all the weights with 1 and mark all the vertexes with one then run MaxFlow but don't go through node which is 
marked with zero or edge marked with zero and the amount of flows is the amount of paths 
---------------------------------------------------------------------------------------------------------------------------------------
3- What if the Capicity is on the vertexes
Simply split each vertex i to i and V+i ( V is the number of vertexes ) and put an edge between them with the cost that on the vertex 
so any edge to that vertex will be directly to it but each vertex that is out from it will be out from V+i vertex then run MaxFlow 
normally.
---------------------------------------------------------------------------------------------------------------------------------------
3-MultiSourceMultiSink 
simpily take a fake Supersource vertex and connect it to all the sources you have with weight on edges inf and take a fake Supersink 
vertex and connect it to all the sinks you have with weight on edges inf, then run MaxFlow normally
---------------------------------------------------------------------------------------------------------------------------------------
4- MaxBipartiteMatching ( means i want the max pair-wise relations between the 2 parts of the bipartite graph )
Simpily,its like multiSourceMultiSink idea.
----------------------------------------------------------------------------------------------------------------------------------------
5-FindMinCutEdges ( means the edges that i will sepreate by it between the source and sink )
idea off course at the end those edges will be equal to zero after running the max flow so first i will run max flow then i will run
dfs entering only the edges which is not zero.
CODE
void flood_fill(int src)
{
	visited[src] = 1;
	for (int i = 0; i < n; i++)
		if (!visited[i] && cap[src][i]>0)
			flood_fill(i);
}

struct edge
{
	int from, to;
	edge(){}
	edge(int f, int t)
	{
		from = f, to = t;
	}
};
edge e[501];
void main()
{
	int i, j, links;
	   cin>>n>>links ;
		for(i=0;i<links;i++)
		{
			int a,b,c;
			cin>>a>>b>>c;
			cap[a-1][b-1] = cap[b-1][a-1] =  c;
			e[i] = edge(a-1, b-1);
		}
		int max_ = maxFlow();
		//cout<<max_<<"\n";

		memset(visited, 0, sizeof(bool)*n);

		/* find all nodes reachable from src */
		flood_fill(src);
		for (i = 0; i < links; i++)
		{	/* any edge that is reachable from u but not v is mincut edge */
			if( visited[ e[i].from ] && !visited[ e[i].to ])
				cout<<e[i].from+1<<" "<<e[i].to+1<<"\n";
			else if( visited[ e[i].to ] && !visited[ e[i].from ] )
				cout<<e[i].from+1<<" "<<e[i].to+1<<"\n";
		}
		cout<<"\n";
}
----------------------------------------------------------------------------------------------------------------------------------------
Dinic's algorithsm for MaxFlow
explanation source: https://www.geeksforgeeks.org/dinics-algorithm-maximum-flow/
Some terms:
1- level graph: is a graph where each node has an index which is its level from the source node its level means the number of edges from
the source to it, i get that by doing bfs from the source node.
2- send_flow: function it gets a path where its nodes can indexes 1,2,3.. till sink from the source.
Explanation for the idea: it is just trying the shortest path first may be it is the best if not i will go to the longer path instead
of directly going to the longer path.
CODE
#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
#define pb push_back
#define mp make_pair
#define sz(v) v.size()
const int N=30*30*2+9,M=30+9;
const ll inf=1e8;
int source,sink;
int lv[N],str[N],Q[N];
/* to-> the node it goes to.
   id-> the id of the reverse edge.
   we-> the capacity on the edge.
*/
struct node{
  int to,id;
  ll we;
  node(int to,ll we,int id) :to(to),we(we),id(id){}
};
vector< vector<node > > v(N);
void addedge(int f,int t,ll we,ll rewe){
  if(f==t) return ;
  v[f].pb(node(t,we,sz(v[t])));
  v[t].pb(node(f,rewe,sz(v[f])-1));
}
bool get_lv_grp(){
  for(int i=0;i<=m*n*2;i++){
    lv[i]=-1;
  }
  lv[source]=0;
  int bc=0;
  Q[bc++]=source;
  for(int fr=0;fr<bc;fr++){
    int cur=Q[fr];

    for(int i=0;i<sz(v[cur]);i++){
        int nw=v[cur][i].to;
        ll we=v[cur][i].we;
        if(lv[nw]<0&&we>0){
            lv[nw]=lv[cur]+1;
            Q[bc++]=nw;
            if(nw==sink)
                return 1;
        }
    }
  }
  return 0;
}
ll send_flow(int S=source,int T=sink,ll mi=inf){
   if(S==sink){
    return mi;
   }
   for(;str[S]<sz(v[S]);str[S]++){
    int nw=v[S][str[S]].to;
    ll we=v[S][str[S]].we;
    
    if(lv[nw]==lv[S]+1&&we>0){
        ll flw=send_flow(nw,sink,min(mi,we));
        if(flw>0){
            v[S][str[S]].we-=flw;
            v[nw][v[S][str[S]].id].we+=flw;
            return flw;
        }
    }
   }
   return 0;
}
ll maxflow(){

   if(source==sink) return inf;
   ll tot=0;
   while(1){
    int isflow=get_lv_grp();
    if(isflow==0){
        break;
    }
    /* i do here str array to min the time taken by send_flow
       function as it goes every time starting from the same 
       source target the same distination so i save in str the
       last index i iterate on and didn't find answer to start
       the next time from the index after it.
    */
    memset(str,0,sizeof(str));
    while(1){
        ll flow=send_flow();
        if(flow==0) break;
        tot+=flow;
    }
   }
   return tot;
}

int main(){
   int nodes,edges;
   scanf("%d %d",&nodes,&edges);
   source=0,sink=nodes+1;
   for(int i=0;i<edges;i++){
    scanf("%d %d %d",&fr,&to,&cap);
    addedge(fr,to,cap,0);
    addedge(to,fr,cap,0);
   }
   ll ans=maxflow();
   printf("%I64d\n",ans);
}
----------------------------------------------------------------------------------------------------------------------------------------

























































































































































