#include <bits/stdc++.h>
#define sz(v)   ((int)(v).size())
#define  all(v)    ((v).begin()),((v).end())
#define  allr(v)    ((v).rbegin()),((v).rend())
#define   pb         push_back
#define   mp         make_pair
#define   mt         make_tuple
//#define   Y            imag()
//#define   X            real()
#define    clr(v,d)      memset( v, d ,sizeof(v))
#define   angle(n)      atan2((n.imag()),(n.real()))
#define   vec(a,b)       ((b)-(a))
//#define   length(a)      hypot( (a.imag()),(a.real()) )
#define   normalize(a)      (a)/(length(a))
//#define    dp(a,b)          (((conj(a))*(b)).real())
//#define    cp(a,b)          (((conj(a))*(b)).imag())
#define    lengthsqrt(a)       dp(a,a)
#define    rotate0( a,ang)    ((a)*exp( point(0,ang) ))
#define    rotateA(about,p,ang)   (rotate0(vec(about,p),ang)+about)
#define    lcm(a,b)                ((a*b)/(__gcd(a,b)))
#define    reflection0(m,v)         (conj((v)/(m))*(m))
#define     reflectionA(m,v,p0)     (conj( (vec(p0,v))/(vec(p0,m)) ) * (vec(p0,m)) ) + p0
//#define     same(p1,p2)               ( dp(  vec(p1,p2),vec(p1,p2)) < eps )
#define     PT                    complex<double>
#define outfile freopen("out.out", "w", stdout);
#define infile  freopen("in.in", "r", stdin);
#define PI acos(-1)
#define scani(n)  scanf("%d",&n)
//#define scans(st) scanf("%s",st)
#define gc getchar_unlocked
typedef  long long     ll ;
typedef  unsigned long long ull;
const double eps= (1e-9);
using namespace std;
int dcmp(long double a,long double b){   return fabsl(a-b)<=eps ? 0: (a>b)? 1:-1  ;}
int getBit(int num, int idx) {return ((num >> idx) & 1) == 1;}
int setBit1(int num, int idx) {return num | (1<<idx);}
ll setBit0(ll num, int idx) {return num & ~(1ll<<idx);}
ll flipBit(int num, int idx) {return num ^ (1<<idx);}
void FS(){ ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);}
const int N=100009;
int n,visid=1,vis[N],subtreesize[N],label[N];
bool iscentroid[N];
vector< vector<int> > v(N);
int dfs(int node)
{
    vis[node]=visid;
    subtreesize[node]=1;
    for(int i=0;i<sz(v[node]);i++)
    {
        int child=v[node][i];
        if(vis[child]!=visid&&iscentroid[child]==0)
            subtreesize[node]+=dfs(child);
    }
    return subtreesize[node];
}
int getrightcentriod(int node,int num)
{
    vis[node]=visid;
    int mxchild=0;
    for(int i=0;i<sz(v[node]);i++)
    {
        int child=v[node][i];

        if(vis[child]!=visid&&!iscentroid[child])
        {
            if(subtreesize[child]>subtreesize[mxchild])
            {
                mxchild=child;
            }
        }
    }

    if(subtreesize[mxchild]<= num/2 && num-subtreesize[node] <= num/2 )
        return node;
    return getrightcentriod(mxchild,num);

}
int getcentriod(int node)
{
    visid++;
    int num=dfs(node);
    visid++;
    int cen=getrightcentriod(node,num);
    iscentroid[cen]=1;
    return cen;
}
void decompose_tree(int node,int lv)
{
    int cen=getcentriod(node);
    label[cen]=lv;
    for(int i=0;i<sz(v[cen]);i++)
    {
        int child=v[cen][i];
        if(iscentroid[child]==0)
        {
            decompose_tree(child,lv+1);
        }
    }
}



int main()
{
    cin>>n;
    for(int i=0;i<n-1;i++)
    {
        int f,t;
        cin>>f>>t;
        v[f].pb(t);
        v[t].pb(f);
    }
    decompose_tree(1,0);
    for(int i=1;i<=n;i++)
    {
        cout<<(char)(label[i]+'A')<<" ";
    }
    cout<<endl;
}
