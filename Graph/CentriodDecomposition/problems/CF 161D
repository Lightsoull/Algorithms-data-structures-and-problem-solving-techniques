//#include "grader.h"
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> // Common file
#include <ext/pb_ds/tree_policy.hpp>
#define sz(v)   ((int)(v).size())
#define  all(v)    ((v).begin()),((v).end())
#define  allr(v)    ((v).rbegin()),((v).rend())
#define   pb         push_back
#define   mp         make_pair
#define   mt         make_tuple
//#define   Y            imag()
//#define   X            real()
#define    clr(v,d)      memset( v, d ,sizeof(v))
#define   angle(n)      atan2((n.imag()),(n.real()))
#define   vec(a,b)       ((b)-(a))
//#define   length(a)      hypot( (a.imag()),(a.real()) )
#define   normalize(a)      (a)/(length(a))
//#define    dp(a,b)          (((conj(a))*(b)).real())
//#define    cp(a,b)          (((conj(a))*(b)).imag())
#define    lengthsqrt(a)       dp(a,a)
#define    rotate0( a,ang)    ((a)*exp( point(0,ang) ))
#define    rotateA(about,p,ang)   (rotate0(vec(about,p),ang)+about)
#define    lcm(a,b)                ((a*b)/(__gcd(a,b)))
#define    reflection0(m,v)         (conj((v)/(m))*(m))
#define     reflectionA(m,v,p0)     (conj( (vec(p0,v))/(vec(p0,m)) ) * (vec(p0,m)) ) + p0
//#define     same(p1,p2)               ( dp(  vec(p1,p2),vec(p1,p2)) < eps )
#define     PT                    complex<double>
#define outfile freopen("out.out", "w", stdout);
#define infile  freopen("in.in", "r", stdin);
#define PI acos(-1)
#define scani(n)  scanf("%d",&n)
//#define scans(st) scanf("%s",st)
#define gc getchar_unlocked
typedef  long long     ll ;
typedef  unsigned long long ull;
const double eps= (1e-9);
using namespace std;
using namespace __gnu_pbds;
int dcmp(long double a,long double b){   return fabsl(a-b)<=eps ? 0: (a>b)? 1:-1  ;}
int getBit(int num, int idx) {return ((num >> idx) & 1) == 1;}
int setBit1(int num, int idx) {return num | (1<<idx);}
ll setBit0(ll num, int idx) {return num & ~(1ll<<idx);}
ll flipBit(int num, int idx) {return num ^ (1<<idx);}
void FS(){ ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);}
const int N=50009;
int n,k;
int siz[N],cnt_no[N];
bool iscen[N];
ll ans=0;
vector< vector<int> > v(N);
void dfs_siz(int no,int p)
{
    siz[no]=1;
    for(int i=0;i<sz(v[no]);i++)
    {
        int ch=v[no][i];
        if(ch==p||iscen[ch])
            continue;
        dfs_siz(ch,no);
        siz[no]+=siz[ch];
    }
}
int get_cen(int no,int p,int num)
{
    for(int i=0;i<sz(v[no]);i++)
    {
        int ch=v[no][i];
        if(ch==p||iscen[ch])
            continue;
        if(siz[ch]*2 > num)
            return get_cen(ch,no,num);
    }
    return no;
}
int getval(int x)
{
    int lf=stL.order_of_key(mp(x,-1));
    int rg=stG.order_of_key(mp(x,1e6));

    return sz(stL)-lf-rg;
}
void dfs(int node,int p,int lv,bool cancel)
{
    if(cancel==0)
    {
        cnt_no[lv]++;
    }
    else
    {
       cnt_no[lv]--;
    }
    for(int i=0;i<sz(v[node]);i++)
    {
        int ch=v[node][i];
        if(ch==p||iscen[ch])
            continue;
        dfs(ch,node,lv+1,cancel);
    }
}

void solve(int node,int p,int lv)
{
    int rem= k-lv;
    int cnt=0;
    if(rem>=0)
    cnt=cnt_no[rem];

    ans+=cnt;

    for(int i=0;i<sz(v[node]);i++)
    {
        int ch=v[node][i];
        if(ch==p||iscen[ch])
            continue;
        solve(ch,node,lv+1);
    }
}
void decomp_tree(int node)
{
    dfs_siz(node,0);
    int cen=get_cen(node,0,siz[node]);
    dfs(cen,0,0,0);

    for(int i=0;i<sz(v[cen]);i++)
    {
        int ch=v[cen][i];
        if(iscen[ch])
            continue;
        dfs(ch,cen,1,1);
        solve(ch,cen,1);
        dfs(ch,cen,1,0);
    }

    ans+= cnt_no[k];


    dfs(cen,0,0,1);
    iscen[cen]=1;
    for(int i=0;i<sz(v[cen]);i++)
    {
        int ch=v[cen][i];
        if(iscen[ch])
            continue;
        decomp_tree(ch);
    }
}
int main()
{
    cin>>n>>k;
    for(int i=0;i<n-1;i++)
    {
        int f,t;
        cin>>f>>t;
        v[f].pb(t);
        v[t].pb(f);
    }

    decomp_tree(1);
    cout<<ans/2<<endl;
}



