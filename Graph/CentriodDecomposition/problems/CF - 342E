//#include "grader.h"
#include <bits/stdc++.h>
#define sz(v)   ((int)(v).size())
#define  all(v)    ((v).begin()),((v).end())
#define  allr(v)    ((v).rbegin()),((v).rend())
#define   pb         push_back
#define   mp         make_pair
#define   mt         make_tuple
//#define   Y            imag()
//#define   X            real()
#define    clr(v,d)      memset( v, d ,sizeof(v))
#define   angle(n)      atan2((n.imag()),(n.real()))
#define   vec(a,b)       ((b)-(a))
//#define   length(a)      hypot( (a.imag()),(a.real()) )
#define   normalize(a)      (a)/(length(a))
//#define    dp(a,b)          (((conj(a))*(b)).real())
//#define    cp(a,b)          (((conj(a))*(b)).imag())
#define    lengthsqrt(a)       dp(a,a)
#define    rotate0( a,ang)    ((a)*exp( point(0,ang) ))
#define    rotateA(about,p,ang)   (rotate0(vec(about,p),ang)+about)
#define    lcm(a,b)                ((a*b)/(__gcd(a,b)))
#define    reflection0(m,v)         (conj((v)/(m))*(m))
#define     reflectionA(m,v,p0)     (conj( (vec(p0,v))/(vec(p0,m)) ) * (vec(p0,m)) ) + p0
//#define     same(p1,p2)               ( dp(  vec(p1,p2),vec(p1,p2)) < eps )
#define     PT                    complex<double>
#define outfile freopen("out.out", "w", stdout);
#define infile  freopen("in.in", "r", stdin);
#define PI acos(-1)
#define scani(n)  scanf("%d",&n)
//#define scans(st) scanf("%s",st)
#define gc getchar_unlocked
typedef  long long     ll ;
typedef  unsigned long long ull;
const double eps= (1e-9);
using namespace std;
int dcmp(long double a,long double b){   return fabsl(a-b)<=eps ? 0: (a>b)? 1:-1  ;}
int getBit(int num, int idx) {return ((num >> idx) & 1) == 1;}
int setBit1(int num, int idx) {return num | (1<<idx);}
ll setBit0(ll num, int idx) {return num & ~(1ll<<idx);}
ll flipBit(int num, int idx) {return num ^ (1<<idx);}
void FS(){ ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);}
const int N=200009;
int n;
vector< vector<int> > v(N);
bool iscen[N];
int siz[N];
char ch[N];
ll cnt[(1<<20)+9],ans[N][23];
void dfs_siz(int node,int par)
{
    siz[node]=1;
    for(int i=0;i<sz(v[node]);i++)
    {
        int child= v[node][i];
        if(child==par||iscen[child])
            continue;
        dfs_siz(child,node);
        siz[node]+=siz[child];
    }
}
int get_cen(int node,int par,int num)
{
    for(int i=0;i<sz(v[node]);i++)
    {
        int child= v[node][i];
        if(child==par||iscen[child]==1)
            continue;
        if(siz[child]*2 > num)
         return get_cen(child,node,num);
    }
    return node;
}
void dfs_mask(int node,int par,int mask,bool cancel)
{
    mask^= (1<<(ch[node]-'a'));
    if(cancel)
        cnt[mask]--;
    else
        cnt[mask]++;

    for(int i=0;i<sz(v[node]);i++)
    {
        int child= v[node][i];
        if(child==par||iscen[child])
            continue;
        dfs_mask(child,node,mask,cancel);
    }
}
void solve(int node,int par,int mask,int lv)
{
    mask^= (1<<(ch[node]-'a'));
    ans[node][lv]+= cnt[mask];

    for(int i=0;i<20;i++)
        ans[node][lv]+= cnt[mask^(1<<i)];
    for(int i=0;i<sz(v[node]);i++)
    {
        int child=v[node][i];
        if(child==par||iscen[child])
            continue;
        solve(child,node,mask,lv);
        ans[node][lv]+= ans[child][lv];
    }
}
void decmp_tree(int node,int lv)
{
    dfs_siz(node,0);
    int num=siz[node];
    int cen=get_cen(node,0,num);
    dfs_mask(cen,0,0,0);
    for(int i=0;i<sz(v[cen]);i++)
    {
        int child= v[cen][i];
        if(iscen[child])
            continue;
        dfs_mask(child,cen,(1<<(ch[cen]-'a')),1);
        solve(child,cen,0,lv);
        dfs_mask(child,cen,(1<<(ch[cen]-'a')),0);
        ans[cen][lv]+= ans[child][lv];
    }

    ans[cen][lv]+=cnt[0];
    for(int i=0;i<20;i++)
    {
        ans[cen][lv]+= cnt[(1<<i)];
    }


    ans[cen][lv]++;
    ans[cen][lv]/=2;

    dfs_mask(cen,0,0,1);
    iscen[cen]=1;

    for(int i=0;i<sz(v[cen]);i++)
    {
        int child=v[cen][i];
        if(iscen[child])
            continue;
        decmp_tree(child,lv+1);
    }
}
int main()
{
    cin>>n;

    for(int i=0;i<n-1;i++)
    {
        int f,t;
        cin>>f>>t;
        v[f].pb(t);
        v[t].pb(f);
    }

    for(int i=1;i<=n;i++)
        cin>>ch[i];

    decmp_tree(1,0);
    for(int i=1;i<=n;i++)
    {
        ll res=0;
        for(int j=0;j<20;j++)
        {
            res+= ans[i][j];
        }
        cout<<res<<" ";
    }

}
