//#include "grader.h"
#include <bits/stdc++.h>
#define sz(v)   ((int)(v).size())
#define  all(v)    ((v).begin()),((v).end())
#define  allr(v)    ((v).rbegin()),((v).rend())
#define   pb         push_back
#define   mp         make_pair
#define   mt         make_tuple
//#define   Y            imag()
//#define   X            real()
#define    clr(v,d)      memset( v, d ,sizeof(v))
#define   angle(n)      atan2((n.imag()),(n.real()))
#define   vec(a,b)       ((b)-(a))
//#define   length(a)      hypot( (a.imag()),(a.real()) )
#define   normalize(a)      (a)/(length(a))
//#define    dp(a,b)          (((conj(a))*(b)).real())
//#define    cp(a,b)          (((conj(a))*(b)).imag())
#define    lengthsqrt(a)       dp(a,a)
#define    rotate0( a,ang)    ((a)*exp( point(0,ang) ))
#define    rotateA(about,p,ang)   (rotate0(vec(about,p),ang)+about)
#define    lcm(a,b)                ((a*b)/(__gcd(a,b)))
#define    reflection0(m,v)         (conj((v)/(m))*(m))
#define     reflectionA(m,v,p0)     (conj( (vec(p0,v))/(vec(p0,m)) ) * (vec(p0,m)) ) + p0
//#define     same(p1,p2)               ( dp(  vec(p1,p2),vec(p1,p2)) < eps )
#define     PT                    complex<double>
#define outfile freopen("out.out", "w", stdout);
#define infile  freopen("in.in", "r", stdin);
#define PI acos(-1)
#define scani(n)  scanf("%d",&n)
//#define scans(st) scanf("%s",st)
#define gc getchar_unlocked
typedef  long long     ll ;
typedef  unsigned long long ull;
const double eps= (1e-9);
using namespace std;
int dcmp(long double a,long double b){   return fabsl(a-b)<=eps ? 0: (a>b)? 1:-1  ;}
int getBit(int num, int idx) {return ((num >> idx) & 1) == 1;}
int setBit1(int num, int idx) {return num | (1<<idx);}
ll setBit0(ll num, int idx) {return num & ~(1ll<<idx);}
ll flipBit(int num, int idx) {return num ^ (1<<idx);}
void FS(){ ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);}
const int N=200009;
int n,k,siz[N],vis[N];
bool iscen[N],iscity[N];
queue<int> q;
priority_queue< pair<int,int> > pq;
queue<int> qarr[N];
vector< vector<int> > v(N);
vector< pair< pair<int,int>,int > > ans;
vector<int> v1;
void dfs_siz(int node,int p)
{
    if(iscity[node])
    siz[node]=1;
    else
    siz[node]=0;
    for(int i=0;i<sz(v[node]);i++)
    {
        int ch=v[node][i];
        if(ch==p||iscen[ch])
            continue;
        dfs_siz(ch,node);
        siz[node]+=siz[ch];
    }
}
int get_cen(int node,int p,int num)
{
    for(int i=0;i<sz(v[node]);i++)
    {
        int ch=v[node][i];
        if(ch==p||iscen[ch])
            continue;
        if(siz[ch]*2 > num)
        return get_cen(ch,node,num);
    }
    return node;
}
void clearq()
{
    while(!q.empty())
        q.pop();
}
int cnt1;
void solve(int node,int p)
{

    if(iscity[node])
    {
        cnt1++;
        q.push(node);
    }
    for(int i=0;i<sz(v[node]);i++)
    {
        int ch=v[node][i];
        if(ch==p||iscen[ch])
            continue;
        solve(ch,node);
    }
}
int get_f()
{
    return pq.top().second;
}
int get_s()
{
    pair<int,int> p= pq.top();
    pq.pop();
    int ans=pq.top().second;
    pq.push(p);
    return ans;
}
void ass(int a,int b,int cen)
{
    int n1= qarr[a].front();
    qarr[a].pop();
    int n2= qarr[b].front();
    qarr[b].pop();


    ans.pb(mp(mp(n1,n2),cen));

    pq.pop();
    pq.pop();

    if(sz(qarr[a])>0)
    pq.push(mp(sz(qarr[a]),a));
    if(sz(qarr[b])>0)
    pq.push(mp(sz(qarr[b]),b));
}

void decomp_tree(int node)
{
    dfs_siz(node,0);
    int cen=get_cen(node,0,siz[node]);
    for(int i=0;i<sz(v[cen]);i++)
    {
        int ch=v[cen][i];
        cnt1=0;
        clearq();
        solve(ch,cen);
        if(cnt1>0)
        {
            pq.push(mp(cnt1,ch));
            qarr[ch]=q;
        }
    }

    if(iscity[cen])
    {
        pq.push(mp(1,cen));
        queue<int> qq;
        qq.push(cen);
        qarr[cen]=qq;
        qq.pop();
    }

    while(!pq.empty())
    {
        int fir=get_f();
        int sec=get_s();
        ass(fir,sec,cen);
    }

}
int main()
{

   cin>>n>>k;

   for(int i=0;i<n-1;i++)
   {
       int f,t;
       cin>>f>>t;
       v[f].pb(t);
       v[t].pb(f);
   }
   for(int i=1;i<=2*k;i++)
   {
       int no;
       cin>>no;
       iscity[no]=1;
   }

   decomp_tree(1);

   for(int i=0;i<sz(ans);i++)
   {
       int no=ans[i].second;
       vis[no]++;
       if(vis[no]==1)
          v1.pb(no);
   }

   cout<<sz(v1)<<endl;
   for(int i=0;i<sz(v1);i++)
    cout<<v1[i]<<" ";
   cout<<endl;

   for(int i=0;i<sz(ans);i++)
   {
       cout<<ans[i].first.first<<" "<<ans[i].first.second<<" "<<ans[i].second<<endl;
   }
}

