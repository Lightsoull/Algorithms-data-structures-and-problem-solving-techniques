If the weights of the graph are 0 or 1 only so you can use dequeue instead of priority queue and if the the weight is 0 push front
and if the weight is 1 push back ( for better complexity )
---------------------------------------------------------------------------------------------------------------------------------------
Notes
1-the logic of Dijkstra algorithsm can't be updated to run dijkstra to get the longest path
2- dijkstra can't used for -ve weights by shifting the weights value to be +ve and count the number of edges used in the path
   because here the weight = weight_I_get_from_dijkstra - shift*Number_of_edges_used  so this equation not only depends on the
   weights but also depends the length of the path.

struct node
{
    ll no,w;

    node(ll no,ll w) : no(no),w(w) {}

    bool operator < ( const node &e) const
    {
        return w> e.w;                         // if it returns true means swap
    }
};

void dijkstra(vector<vector<node> > v,ll s,ll tar)
{

    for(int i=0;i<100000;i++)
        dist[i]=inf;
    clr(pth,0);
    clr(pre,-1);
    clr(vis,0);
    priority_queue< node > pq;
    pq.push(node(s,0));
    pre[s]=-1;
    pth[1]=1;
    dist[1]=0;
    while(!pq.empty())
    {

       node cur=pq.top();
       pq.pop();
      if(vis[cur.no])
      continue;
      
      vis[cur.no]=1;

      ll add=dist[cur.no];
      for(int i=0;i<sz(v[cur.no]);i++)
      {

          node nw=v[cur.no][i];

          if(dist[nw.no]> add+nw.w)
          {
              
             pq.push(node(nw.no,add+nw.w));
             pre[nw.no]=cur.no;
             dist[nw.no]=add+nw.w;
             pth[nw.no]=pth[cur.no];
          }
          else if(add+nw.w==dist[nw.no])
          {
              pth[nw.no]+=pth[cur.no];
          }

      }
    }
}
int main()
{
    int n,m;
    scanf("%d %d",&n,&m);
    vector< vector<node> > v(100000+9);
    ll f,t,w;
    for(int i=0;i<m;i++)
    {
         scanf("%I64d%I64d%I64d",&f,&t,&w);
        v[f].pb(node(t,w));
        v[t].pb(node(f,w));
    }
    dijkstra(v,1,n);
   printf("%I64d\n",dist[n] );
}

------------------------------------------------------------------------------------------------------------------------------------
Notes:
if you only need the min path from a source to a destination value you can not use the vis array but at the condition of relaxtation
if(dist[nw.no]> add+nw.w) it must be greater than not greater than or equal, but take care this may take longer time.
-------------------------------------------------------------------------------------------------------------------------------------
if the edges are only binary zeros and ones so there is more efficient way to do dijkstra, i will use deque instead of priority queue
as the edges are only zeros and ones so if i am in a certain node and edge is zero put it at front else put it at end so this will
make the deque sorted as the priority queue and it takes less complexity

CODE

typedef struct edge
{
    int no,w;
    edge(int no,int w) : no(no),w(w) {}
}e;
int dijk(int sr,int des)
{
    for(int i=0;i<N;i++)
        dist[i]=inf;
    clr(vis,0);
    dist[sr]=0;
    deque< e> dq;
    dq.push_back(e(sr,0));

    while(!dq.empty())
   {
       e cur=dq.front();
       dq.pop_front();

      if(vis[cur.no])
      continue;
      
      vis[cur.no]=1;
      
       int add=cur.w;

       for(int i=0;i<sz(v[cur.no]);i++)
      {
          e nw= v[cur.no][i];


            if(dist[nw.no]>nw.w+add)
            {
                dist[nr][nc]=nw.w+add;
                if(nw.w==0)
                dq.push_front(e(nw.no,nw.w+add));
                else
                dq.push_back(e(nw.no,nw.w+add));
            }
       }
   }
   return dist[des];
}
---------------------------------------------------------------------------------------------------------------------------------------
