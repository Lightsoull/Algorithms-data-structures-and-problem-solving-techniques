/*
Note this code for only checking whether there is a cycle in a given directed graph or not, it may not get all the cycles exists.
*/

void dfs_EdgeClassification(int node)
{
	start[node] = timer++;

	rep(i, adj[node])
	{
		int child = adj[node][i];
		if (start[child] == -1)	// Not visited Before. Treed Edge
			dfs_EdgeClassification(child);
		else {
			if(finish[child] == -1)// then this is ancestor that called us and waiting us to finish. Then Cycle. Back Edge
				anyCycle = 1;
			else if(start[node] < start[child])	// then you are my descendant
				;	// Forward Edge
			else
				;	// Cross Edge
		}
	}

	finish[node] = timer++;
}


// if graph if not directed so dfs and if i visit some node again so there is a cycle
--------------------------------------------------------------------------------------------------------------------------
In undircted graph checking whether there is an odd cycle or not.
#include <bits/stdc++.h>
using namespace std;
#define finish(x) return cout << x << endl, 0
#define ll long long
const int N = 10001;
int n, m;
bool vis[N][2];
vector <int> v[N];
 
bool dfs(int node, bool parity)
{
    if(vis[node][parity])
      return 0;
    if(vis[node][!parity]) 
      return 1;
    vis[node][parity] = 1;
    for(auto &i : v[node])
        if(dfs(i, !parity)) return 1;
    return 0;
}
int main()
{   
    cin >> n >> m;
    for(int i = 0 ; i < m ; i++){
        int x, y;
        cin >> x >> y;
        v[x].push_back(y);
        v[y].push_back(x);
    }
    if(dfs(1, 0)) 
     cout << "yes" << endl;
    else 
     cout << "no" << endl;
}
---------------------------------------------------------------------------------------------------------------------------------------
