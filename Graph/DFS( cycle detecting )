/*
Note this code for only checking whether there is a cycle in a given directed graph or not, it may not get all the cycles exists.
*/

void dfs_EdgeClassification(int node)
{
	start[node] = timer++;

	rep(i, adj[node])
	{
		int child = adj[node][i];
		if (start[child] == -1)	// Not visited Before. Treed Edge
			dfs_EdgeClassification(child);
		else {
			if(finish[child] == -1)// then this is ancestor that called us and waiting us to finish. Then Cycle. Back Edge
				anyCycle = 1;
			else if(start[node] < start[child])	// then you are my descendant
				;	// Forward Edge
			else
				;	// Cross Edge
		}
	}

	finish[node] = timer++;
}


// if graph if not directed so dfs and if i visit some node again so there is a cycle
--------------------------------------------------------------------------------------------------------------------------
In undircted graph checking whether there is an odd cycle or not.
#include <bits/stdc++.h>
using namespace std;
#define finish(x) return cout << x << endl, 0
#define ll long long
const int N = 10001;
int n, m;
bool vis[N][2];
vector <int> v[N];
 
bool dfs(int node, bool parity)
{
    if(vis[node][parity])
      return 0;
    if(vis[node][!parity]) 
      return 1;
    vis[node][parity] = 1;
    for(auto &i : v[node])
        if(dfs(i, !parity)) return 1;
    return 0;
}
int main()
{   
    cin >> n >> m;
    for(int i = 0 ; i < m ; i++){
        int x, y;
        cin >> x >> y;
        v[x].push_back(y);
        v[y].push_back(x);
    }
    if(dfs(1, 0)) 
     cout << "yes" << endl;
    else 
     cout << "no" << endl;
}
---------------------------------------------------------------------------------------------------------------------------------------
In undircted graph getting all teh cycles ad print them.
source: https://www.geeksforgeeks.org/print-all-the-cycles-in-an-undirected-graph/
complexity:  O(N+M)



// C++ program to print all the cycles
// in an undirected graph
#include <bits/stdc++.h>
using namespace std;
const int N = 100000;

// variables to be used
// in both functions
vector<int> graph[N];
vector<int> cycles[N];

// Function to mark the vertex with
// different colors for different cycles
void dfs_cycle(int u, int p, int color[],
			int mark[], int par[], int& cyclenumber)
{

	// already (completely) visited vertex.
	if (color[u] == 2) {
		return;
	}

	// seen vertex, but was not completely visited -> cycle detected.
	// backtrack based on parents to find the complete cycle.
	if (color[u] == 1) {

		cyclenumber++;
		int cur = p;
		mark[cur] = cyclenumber;

		// backtrack the vertex which are
		// in the current cycle thats found
		while (cur != u) {
			cur = par[cur];
			mark[cur] = cyclenumber;
		}
		return;
	}
	par[u] = p;

	// partially visited.
	color[u] = 1;

	// simple dfs on graph
	for (int v : graph[u]) {

		// if it has not been visited previously
		if (v == par[u]) {
			continue;
		}
		dfs_cycle(v, u, color, mark, par, cyclenumber);
	}

	// completely visited.
	color[u] = 2;
}

// add the edges to the graph
void addEdge(int u, int v)
{
	graph[u].push_back(v);
	graph[v].push_back(u);
}

// Function to print the cycles
void printCycles(int edges, int mark[], int& cyclenumber)
{

	// push the edges that into the
	// cycle adjacency list
	for (int i = 1; i <= edges; i++) {
		if (mark[i] != 0)
			cycles[mark[i]].push_back(i);
	}

	// print all the vertex with same cycle
	for (int i = 1; i <= cyclenumber; i++) {
		// Print the i-th cycle
		cout << "Cycle Number " << i << ": ";
		for (int x : cycles[i])
			cout << x << " ";
		cout << endl;
	}
}

// Driver Code
int main()
{

	// add edges
	addEdge(1, 2);
	addEdge(2, 3);
	addEdge(3, 4);
	addEdge(4, 6);
	addEdge(4, 7);
	addEdge(5, 6);
	addEdge(3, 5);
	addEdge(7, 8);
	addEdge(6, 10);
	addEdge(5, 9);
	addEdge(10, 11);
	addEdge(11, 12);
	addEdge(11, 13);
	addEdge(12, 13);

	// arrays required to color the
	// graph, store the parent of node
	int color[N];
	int par[N];

	// mark with unique numbers
	int mark[N];

	// store the numbers of cycle
	int cyclenumber = 0;
	int edges = 13;

	// call DFS to mark the cycles
	dfs_cycle(1, 0, color, mark, par, cyclenumber);

	// function to print the cycles
	printCycles(edges, mark, cyclenumber);
}

