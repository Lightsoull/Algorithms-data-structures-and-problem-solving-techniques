Sources
1-http://e-maxx.ru/algo/assignment_hungary
2-https://www.topcoder.com/community/data-science/data-science-tutorials/assignment-problem-and-hungarian-algorithm/
3-(code) https://github.com/ADJA/algos/blob/master/Graphs/HungarianMatching.cpp
-Problem
used to get the min cost of the max bipartite matching.
-Implementation Notes
1- it works on N*M matrix called cost martix (a) where N are people and M are jobs, where a[i][j] = the cost for the ith person 
to do the jth job, N is the left side and M is the right side.
2- it works for +ve and -ve weights.
3- if there is no edge between some person and a job put the cost with inf.
4- this implementation for MCBM (max cardinality bipartite matching with Min cost).
5- if you want to do it with max cost just multiply all the weights with -1.
-Complexity: O( N*N*M ) , where N <= M.

Examples
1- Given a bipartite graph, it is required to find in it a matching maximal matching of the minimum weight 
(that is, the matching size is maximized first, its cost is minimized).
To solve, we simply construct the assignment problem, putting the number "infinity" in place of the missing edges. 
After that, we solve the problem with the Hungarian algorithm, and remove from the answer
the edges of infinite weight (they could come in response if the problem has no solution in the form of a perfect matching).

2- Can be used to get the MPC (min path cover) also or any application on MCBM, but put costs with zero. 

3-The problem of potentials . Dana matrix a[1..n][1..m]. Required to find two arrays u[1..n] and v[1..m] such that 
for any i and j executed u[i] + v[j] <= a[i][j], but the sum of the elements of arrays u[] and v[] is maximum.
Knowing the Hungarian algorithm, the solution of this problem is not difficult: the Hungarian algorithm just finds the 
potential u[], v[] that satisfies the condition of the problem. On the other hand, without knowledge of the Hungarian algorithm, 
this problem seems almost impossible to solve, so
for u[i] + v[j] <= a[i][j] : just do max matching with min cost and the values in u,v or lx,ly will be the answer.
for u[i] + v[j] >= a[i][j] : just do max matching with max cost and the values in u,v or lx,ly will be the answer.
--------------------------------------------------------------------------------------------------------------------------------------
CODE details
1- par[right]=left, is the match of the right side to the left side.
2- matrix a is the cost matrix.
3- u[] is the labeling for the left side and v[] is the labeling for the right side , that u[i]+v[j] = a[i][j].
4- link[right] stores the previous node in the right side that is matched before the current right side node.
5- the second do-while loop just alternate the augmenting path.
6- Take Care the n must be <= m.

CODE For Max Matching with min cost
-----------------------------------
const int MAXN = 105;
const int INF = 1000 * 1000 * 1000;

int n,m;
int a[MAXN][MAXN];
int u[MAXN], v[MAXN], link[MAXN], par[MAXN], used[MAXN], minval[MAXN];

int main()
{

    scanf("%d %d", &n,&m);
    for (int i = 1; i <= n; i++)
        for (int j = 1; j <= m; j++)
            scanf("%d", &a[i][j]);
    clr(par,0);
    clr(link,0);
    clr(u,0);
    clr(v,0);
    for (int i = 1; i <= n; i++)
    {
        for (int j = 0; j < MAXN; j++)
        {
            used[j] = false;
            minval[j] = INF;
        }
        int j_cur = 0;
        par[j_cur] = i;
        do
        {
            used[j_cur] = true;
            int j_next, delta = INF, i_cur = par[j_cur];
            for (int j = 0; j <= m; j++)
                if (!used[j])
                {
                    int cur = a[i_cur][j] - u[i_cur] - v[j];
                    if (cur < minval[j])
                    {
                        minval[j] = cur; link[j] = j_cur;
                    }
                    if (minval[j] < delta)
                    {
                        delta = minval[j]; j_next = j;
                    }
                }
            for (int j = 0; j <= m; j++)
                if (used[j])
                {
                    u[par[j]] += delta; v[j] -= delta;
                }
                else
                {
                    minval[j] -= delta;
                }
            j_cur = j_next;
        }while (par[j_cur]);
       
        do
        {
            int j_prev = link[j_cur];
            par[j_cur] = par[j_prev];
            j_cur = j_prev;
        } while (j_cur > 0);
    }
    int res=-v[0];
    printf("%d", res);
    vector< pair<int,int> > matchings;
    for(int i=1;i<=m;i++)
        if(par[i]!=0)
         matchings.pb(mp(par[i],i));
}
----------------------------------------------------------------------------------------------------------------------------------------
CODE For Max Matching with max cost
-----------------------------------
const int N=109;
const int inf=100000000;
int n,m;
int a[N][N],id,u[N],v[N],par[N],link[N],mival[N];
bool used[N];
void I()
{
    for(int i=0;i<N;i++)
    {
        for(int j=0;j<N;j++)
        {
            a[i][j]=inf;
        }
    }
}
int Hungrian()
{

    clr(par,0);
    clr(link,0);
    clr(u,0);
    clr(v,0);

    for(int i=1;i<=n;i++)
    {
        for(int j=0;j<=m;j++)
        {
            used[j]=0;
            mival[j]=inf;
        }
        int j_cur=0;
        par[j_cur]=i;

        do
        {
            used[j_cur]=1;
            int delta=inf,j_next,i_cur=par[j_cur];
            for(int j=0;j<=m;j++)
            {
                if(!used[j])
                {
                    int cur= a[i_cur][j]-u[i_cur]-v[j];

                    if(mival[j]>cur)
                    {
                        mival[j]=cur;  link[j]=j_cur;
                    }
                    if(mival[j]<delta)
                    {
                        delta=mival[j]; j_next=j;
                    }
                }
            }

            for(int j=0;j<=m;j++)
            {
                if(used[j])
                {
                    u[par[j]]+=delta; v[j]-=delta;
                }
                else
                {
                    mival[j]-=delta;
                }
            }
            j_cur=j_next;
        }while(par[j_cur]>0);


            do
            {
                int j_prev=link[j_cur];
                par[j_cur]=par[j_prev];
                j_cur=j_prev;
            }while(j_cur>0);
     }

    return -v[0];
}
int main()
{
    cin>>n>>m;
    int fl=0;
    if(n>m)
    {
        fl=1;
        swap(n,m);
    }
    I();
    while(1)
    {
        int f,t,c;
        cin>>f>>t>>c;
        if(f==0&&t==0&&c==0)
            break;
        if(fl==0)
        a[f][t]=-c;
        else
        a[t][f]=-c;
    }
    cout<<-Hungrian()<<endl;
}
----------------------------------------------------------------------------------------------------------------------------------------
-Faster Hungrian Algorithm.
-Source: this approach explained here : 
https://www.topcoder.com/community/competitive-programming/tutorials/assignment-problem-and-hungarian-algorithm/
-Notes about code
1- cost is the matrix of the cost, here i assume that it is NxN.
2- x is always the left side and y is the right side.
3- V is the N.
4- lx is the label for the left side, ly is the label of the right side.
5- xy is the match of the left side to the right side, yx is the match of the right side to the left side.
6- pre[x] stores the matched node from the left side before the current x node.
7- S is a visited array for the left side, T is a visited array for the right side.
8- slack[y] stores the min a mount to be added to add one node from the right side y.
9- slackx[y] stores the left side node for this y node that lead to the min result stored in slack[y].
10- for min cost just multiply the weights with -1.
CODE for max matching max cost
------------------------------
#define MAX_V 500
int V,cost[MAX_V][MAX_V];
int lx[MAX_V],ly[MAX_V];
int max_match,xy[MAX_V],yx[MAX_V],pre[MAX_V];
bool S[MAX_V],T[MAX_V];
int slack[MAX_V],slackx[MAX_V];
void init_labels()
{
	memset(lx,0,sizeof(lx));
	memset(ly,0,sizeof(ly));
 
	for(int x = 0;x<V;++x)
		for(int y = 0;y<V;++y)
			lx[x] = max(lx[x],cost[x][y]);
}
void update_labels()
{
	int x,y,delta = INT_MAX;
	for(y = 0;y<V;++y)
		if(!T[y]) delta = min(delta,slack[y]);
	for(x = 0;x<V;++x)
		if(S[x]) lx[x] -= delta;
	for(y = 0;y<V;++y)
		if(T[y]) ly[y] += delta;
	for(y = 0;y<V;++y)
		if(!T[y]) slack[y] -= delta;
}
void add_to_tree(int x, int prevx)
{
	S[x] = true;
	pre[x] = prevx;
	for(int y = 0;y<V;++y)
        {
		if(lx[x]+ly[y]-cost[x][y]<slack[y])
		{
			slack[y] = lx[x]+ly[y]-cost[x][y];
			slackx[y] = x;
		}
	}
}
int q[MAX_V],head,tail;
void augment()
{
	int x,y,root;
	head = tail = 0;
	memset(S,false,sizeof(S));
	memset(T,false,sizeof(T));
	memset(pre,-1,sizeof(pre));
	for(x = 0;x<V;++x)
	{
		if(xy[x]==-1)
                {
			q[tail++] = root = x;
			pre[root] = -2;
			S[root] = true;
			break;
		}
	}
	for(y = 0;y<V;++y)
        {
		slack[y] = lx[root]+ly[y]-cost[root][y];
		slackx[y] = root;
	}
	while(true)
	{
		while(head<tail)
                {
			x = q[head++];
 
			for(y = 0;y<V;++y)
			{
				if(cost[x][y]==lx[x]+ly[y] && !T[y])
                                {
					if(yx[y]==-1) break;
 
					T[y] = true;
					q[tail++] = yx[y];
					add_to_tree(yx[y],x);
				}
			}
 
			if(y<V) break;
		}
		if(y<V) break;
		update_labels();
		head = tail = 0;
		for(y = 0;y<V;++y)
		{
			if(!T[y] && slack[y]==0)
                        {
				if(yx[y]==-1)
				{
					x = slackx[y];
					break;
				}
 
				T[y] = true;
 
				if(!S[yx[y]])
                                {
					q[tail++] = yx[y];
					add_to_tree(yx[y],slackx[y]);
				}
			}
		}
 
		if(y<V) break;
	}
	if(y<V)
        {
	  ++max_match;
	  for(int cx = x,cy = y,ty;cx!=-2;cx = pre[cx],cy = ty)
          {
		ty = xy[cx];
		yx[cy] = cx;
		xy[cx] = cy;
	  }
    }
}
int hungarian()
{
	int ret = 0;
	max_match = 0;
 
	memset(xy,-1,sizeof(xy));
	memset(yx,-1,sizeof(yx));
 
	init_labels();
	for(int i = 0;i<V;++i) 
        augment();
 
	for(int x = 0;x<V;++x)
		ret += cost[x][xy[x]];
 
	return ret;
}
int main()
{
	while(scanf("%d",&V)==1)
        {
		for(int i = 0;i<V;++i)
			for(int j = 0;j<V;++j)
				scanf("%d",&cost[i][j]);
 
		int ans = hungarian();
	}
 
	return 0;
}
----------------------------------------------------------------------------------------------------------------------------------------
-The Faster Hungrian algorithm for max matching min cost.
1- just put the weights multiplied with -1 and multiply the final answer with -1, but take care the edges that is not found put them
with -inf noramly.
CODE
----
const int MAX=109;
const int inf=100000000;
int r,n,lx[MAX],ly[MAX],max_match,slack[MAX],slackx[MAX],cost[MAX][MAX],pre[MAX],xy[MAX],yx[MAX],rx[MAX],ry[MAX]
,hx[MAX],hy[MAX];
bool T[MAX],S[MAX];
void I(int n)
{
    for(int i=0;i<=n;i++)
    {
        for(int j=0;j<=n;j++)
        {
            cost[i][j]=-inf;
        }
    }
}
void intial_labels()
{
    clr(lx,0);
    clr(ly,0);
    for(int x=1;x<=n;x++)
    {
        for(int y=1;y<=n;y++)
        {
            lx[x]=max(lx[x],cost[x][y]);
        }
    }
}
void update_labels()
{
    int delta=INT_MAX;
    for(int y=1;y<=n;y++)
    {
        if(T[y]==0)
        delta=min(delta,slack[y]);
    }
    for(int x=1;x<=n;x++)
    {
        if(S[x]==1)
            lx[x]-=delta;
    }
    for(int y=1;y<=n;y++)
    {
        if(T[y]==1)
            ly[y]+=delta;
    }
    for(int y=1;y<=n;y++)
    {
        if(T[y]==0)
            slack[y]-=delta;
    }
}
void add_to_tree(int x,int prex)
{
    S[x]=1;
    pre[x]=prex;

    for(int y=1;y<=n;y++)
    {
        if(lx[x]+ly[y]-cost[x][y]<slack[y])
        {
            slack[y]=lx[x]+ly[y]-cost[x][y];
            slackx[y]=x;
        }
    }
}
int q[MAX],tail,head;
void augment()
{
    int x,y,root;
    head=tail=0;
    clr(S,0);
    clr(T,0);
    clr(pre,-1);

    for(x=1;x<=n;x++)
    {
        if(xy[x]==-1)
        {
            q[tail++]=root=x;
            pre[root]=-2;
            S[root]=1;
            break;
        }
    }

    for(y=1;y<=n;y++)
    {
        slack[y]=lx[root]+ly[y]-cost[root][y];
        slackx[y]=root;
    }

    while(1)
    {
        while(head<tail)
        {
            x=q[head++];
            for(y=1;y<=n;y++)
            {
                if(cost[x][y]==lx[x]+ly[y]&&T[y]==0)
                {
                    if(yx[y]==-1)
                        break;
                    T[y]=1;
                    q[tail++]=yx[y];
                    add_to_tree(yx[y],x);
                }
            }
            if(y<n+1)
                break;
        }
        if(y<n+1)
            break;
        update_labels();
        head=tail=0;

        for(y=1;y<=n;y++)
        {
            if(T[y]==0&&slack[y]==0)
            {
                if(yx[y]==-1)
                {
                    x=slackx[y];
                    break;
                }
                T[y]=1;

                if(S[yx[y]]==0)
                {
                    q[tail++]=yx[y];
                    add_to_tree(yx[y],slackx[y]);
                }
            }
        }
        if(y<n+1)
            break;
    }

    if(y<n+1)
    {
        max_match++;
        for(int cx=x,cy=y,ty;cx!=-2;cx=pre[cx],cy=ty)
        {
            ty=xy[cx];
            yx[cy]=cx;
            xy[cx]=cy;
        }
    }
}
int Hungrian()
{
    int ret=0;
    max_match=0;
    clr(xy,-1);
    clr(yx,-1);

    intial_labels();
    for(int i=1;i<=n;i++)
        augment();
    for(int x=1;x<=n;x++)
    {
        if(xy[x]!=-1&&cost[x][xy[x]]!=-inf)
        {
            ret+= cost[x][xy[x]];
        }
    }
    return ret;
}
int main()
{
    int r,h;
    while(cin>>r>>h)
    {
        for(int i=1;i<=r;i++)
        {
            cin>>rx[i]>>ry[i];
        }
        for(int i=1;i<=h;i++)
        {
            cin>>hx[i]>>hy[i];
        }

        n=max(r,h);
        I(n);
        for(int i=1;i<=r;i++)
        {
            for(int j=1;j<=h;j++)
            {
                int dist= abs(hx[j]-rx[i])+abs(hy[j]-ry[i]);
                cost[i][j]=-dist;
            }
        }

        cout<<-Hungrian()<<endl;
    }

}
----------------------------------------------------------------------------------------------------------------------------------------
















