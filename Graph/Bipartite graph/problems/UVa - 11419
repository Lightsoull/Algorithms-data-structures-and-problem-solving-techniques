/*
Explanation: okay to kill the ith enemy so you have to choose rowi or columni so it is like a bipartite graph between the rows on
the left and the columns on the right and you are connecting a relations between them and you need the min number of nodes which
means (rows or columns) to cover each edge at least one time which is the MVC ( min vertex cover )
*/
#include <bits/stdc++.h>
#define sz(v)   ((int)(v).size())
#define  all(v)    ((v).begin()),((v).end())
#define  allr(v)    ((v).rbegin()),((v).rend())
#define   pb         push_back
#define   mp         make_pair
#define   mt         make_tuple
//#define   Y            imag()
//#define   X            real()
#define    clr(v,d)      memset( v, d ,sizeof(v))
#define   angle(n)      atan2((n.imag()),(n.real()))
#define   vec(a,b)       ((b)-(a))
#define   length(a)      hypot( (a.imag()),(a.real()) )
#define   normalize(a)      (a)/(length(a))
//#define    dp(a,b)          (((conj(a))*(b)).real())
//#define    cp(a,b)          (((conj(a))*(b)).imag())
#define    lengthsqrt(a)       dp(a,a)
#define    rotate0( a,ang)    ((a)*exp( point(0,ang) ))
#define    rotateA(about,p,ang)   (rotate0(vec(about,p),ang)+about)
#define    lcm(a,b)                ((a*b)/(__gcd(a,b)))
#define    reflection0(m,v)         (conj((v)/(m))*(m))
#define     reflectionA(m,v,p0)     (conj( (vec(p0,v))/(vec(p0,m)) ) * (vec(p0,m)) ) + p0
//#define     same(p1,p2)               ( dp(  vec(p1,p2),vec(p1,p2)) < eps )
#define     PT                    complex<double>
#define outfile freopen("out.out", "w", stdout);
#define infile  freopen("in.in", "r", stdin);
#define PI acos(-1)
typedef  long long     ll ;
typedef  unsigned long long ull;
const double eps= (1e-9);
using namespace std;
int dcmp(long double a,long double b){   return fabsl(a-b)<=eps ? 0: (a>b)? 1:-1  ;}
int getBit(int num, int idx) {return ((num >> idx) & 1) == 1;}
int setBit1(int num, int idx) {return num | (1<<idx);}
ll setBit0(ll num, int idx) {return num & ~(1ll<<idx);}
ll flipBit(int num, int idx) {return num ^ (1<<idx);}
void FS(){ ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);}
int countNumBit1(int mask) {int ret=0; while (mask)     {mask &= (mask-1);++ret;    }return ret;}
const int N=1002;
int L[N],R[N],n,r,c;
bool visL[N],visR[N];
vector< vector<int> > v(N);
void I()
{
    for(int i=0;i<N;i++)
        v[i].clear();
}
bool canmatch(int no)
{
    visL[no]=1;
    for(int i=0;i<sz(v[no]);i++)
    {
        int nw=v[no][i];
        if(visR[nw])
            continue;
        visR[nw]=1;
        if(L[nw]<0||canmatch(L[nw]))
        {
            L[nw]=no; R[no]=nw;
            return 1;
        }
    }
    return 0;
}
void MCBM()
{
       int flow=0;
       clr(L,-1); clr(R,-1);
       for(int i=1;i<=r;i++)
       {
           clr(visL,0); clr(visR,0);
           if(canmatch(i))
             flow++;
       }
       clr(visL,0); clr(visR,0);
       for(int i=1;i<=r;i++)
       {
           if(R[i]==-1)
            canmatch(i);
       }
       printf("%d",flow);
       for(int i=1;i<=r;i++)
        if(visL[i]==0)
         printf(" r%d",i);
       for(int i=1;i<=c;i++)
         if(visR[i]==1)
         printf(" c%d",i);
    printf("\n");
}
 
int main()
{
    while(scanf("%d%d%d",&r,&c,&n),r||c||n)
    {
 
        if(r==0&&c==0&&n==0)
            break;
        I();
        for(int i=0;i<n;i++)
        {
            int rw,cl;
            scanf("%d %d",&rw,&cl);
            v[rw].pb(cl);
        }
        MCBM();
    }
}
