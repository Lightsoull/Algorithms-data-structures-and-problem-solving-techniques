/*
Explanation: here the solution is to match with the max cost but not nessary max matching, so i will need to use hungrian algorithm
for max matching with max cost but as i said before it is not nessary max matching so i will intialize the a[][] matrix with zero 
to put edge between every node in left to right with cost zero to grantee that the max matching will always occur and focus on getting
the max cost.
*/

#include <bits/stdc++.h>
#define sz(v)   ((int)(v).size())
#define  all(v)    ((v).begin()),((v).end())
#define  allr(v)    ((v).rbegin()),((v).rend())
#define   pb         push_back
#define   mp         make_pair
#define   mt         make_tuple
//#define   Y            imag()
//#define   X            real()
#define    clr(v,d)      memset( v, d ,sizeof(v))
#define   angle(n)      atan2((n.imag()),(n.real()))
#define   vec(a,b)       ((b)-(a))
#define   length(a)      hypot( (a.imag()),(a.real()) )
#define   normalize(a)      (a)/(length(a))
//#define    dp(a,b)          (((conj(a))*(b)).real())
//#define    cp(a,b)          (((conj(a))*(b)).imag())
#define    lengthsqrt(a)       dp(a,a)
#define    rotate0( a,ang)    ((a)*exp( point(0,ang) ))
#define    rotateA(about,p,ang)   (rotate0(vec(about,p),ang)+about)
#define    lcm(a,b)                ((a*b)/(__gcd(a,b)))
#define    reflection0(m,v)         (conj((v)/(m))*(m))
#define     reflectionA(m,v,p0)     (conj( (vec(p0,v))/(vec(p0,m)) ) * (vec(p0,m)) ) + p0
//#define     same(p1,p2)               ( dp(  vec(p1,p2),vec(p1,p2)) < eps )
#define     PT                    complex<double>
#define outfile freopen("out.out", "w", stdout);
#define infile  freopen("in.in", "r", stdin);
#define PI acos(-1)
typedef  long long     ll ;
typedef  unsigned long long ull;
const double eps= (1e-9);
using namespace std;
int dcmp(long double a,long double b){   return fabsl(a-b)<=eps ? 0: (a>b)? 1:-1  ;}
int getBit(int num, int idx) {return ((num >> idx) & 1) == 1;}
int setBit1(int num, int idx) {return num | (1<<idx);}
ll setBit0(ll num, int idx) {return num & ~(1ll<<idx);}
ll flipBit(int num, int idx) {return num ^ (1<<idx);}
void FS(){ ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);}
int countNumBit1(int mask) {int ret=0; while (mask)     {mask &= (mask-1);++ret;    }return ret;}
const int N=109;
const int inf=100000000;
int n,m;
int a[N][N],id,u[N],v[N],par[N],link[N],mival[N];
bool used[N];
void I()
{
    for(int i=0;i<N;i++)
    {
        for(int j=0;j<N;j++)
        {
            a[i][j]=0;
        }
    }
}
int Hungrian()
{

    clr(par,0);
    clr(link,0);
    clr(u,0);
    clr(v,0);

    for(int i=1;i<=n;i++)
    {
        for(int j=0;j<=m;j++)
        {
            used[j]=0;
            mival[j]=inf;
        }
        int j_cur=0;
        par[j_cur]=i;

        do
        {
            used[j_cur]=1;
            int delta=inf,j_next,i_cur=par[j_cur];
            for(int j=0;j<=m;j++)
            {
                if(!used[j])
                {
                    int cur= a[i_cur][j]-u[i_cur]-v[j];

                    if(mival[j]>cur)
                    {
                        mival[j]=cur;  link[j]=j_cur;
                    }
                    if(mival[j]<delta)
                    {
                        delta=mival[j]; j_next=j;
                    }
                }
            }

            for(int j=0;j<=m;j++)
            {
                if(used[j])
                {
                    u[par[j]]+=delta; v[j]-=delta;
                }
                else
                {
                    mival[j]-=delta;
                }
            }
            j_cur=j_next;
        }while(par[j_cur]>0);


            do
            {
                int j_prev=link[j_cur];
                par[j_cur]=par[j_prev];
                j_cur=j_prev;
            }while(j_cur>0);
        }

    return -v[0];
}

int main()
{
    int T;
    cin>>T;
    while(T--)
    {
        cin>>n>>m;
        int fl=0;
        if(n>m)
        {
            fl=1;
            swap(n,m);
        }
        I();
        while(1)
        {
            int f,t,c;
            cin>>f>>t>>c;
            if(f==0&&t==0&&c==0)
                break;
            if(fl==0)
            a[f][t]=-c;
            else
            a[t][f]=-c;
        }

       cout<<-Hungrian()<<endl;

    }
}
