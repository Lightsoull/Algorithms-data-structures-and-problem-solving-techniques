/*
explanation: https://www.hackerearth.com/problem/algorithm/case-of-two-bipartite-graphs-ec59e174/editorial/
*/
#include <bits/stdc++.h>
#define sz(v)   ((int)(v).size())
#define  all(v)    ((v).begin()),((v).end())
#define  allr(v)    ((v).rbegin()),((v).rend())
#define   pb         push_back
#define   mp         make_pair
#define   mt         make_tuple
//#define   Y            imag()
//#define   X            real()
#define    clr(v,d)      memset( v, d ,sizeof(v))
#define   angle(n)      atan2((n.imag()),(n.real()))
#define   vec(a,b)       ((b)-(a))
//#define   length(a)      hypot( (a.imag()),(a.real()) )
#define   normalize(a)      (a)/(length(a))
//#define    dp(a,b)          (((conj(a))*(b)).real())
//#define    cp(a,b)          (((conj(a))*(b)).imag())
#define    lengthsqrt(a)       dp(a,a)
#define    rotate0( a,ang)    ((a)*exp( point(0,ang) ))
#define    rotateA(about,p,ang)   (rotate0(vec(about,p),ang)+about)
#define    lcm(a,b)                ((a*b)/(__gcd(a,b)))
#define    reflection0(m,v)         (conj((v)/(m))*(m))
#define     reflectionA(m,v,p0)     (conj( (vec(p0,v))/(vec(p0,m)) ) * (vec(p0,m)) ) + p0
//#define     same(p1,p2)               ( dp(  vec(p1,p2),vec(p1,p2)) < eps )
#define     PT                    complex<double>
#define outfile freopen("out.out", "w", stdout);
#define infile  freopen("in.in", "r", stdin);
#define PI acos(-1)
typedef  long long     ll ;
typedef  unsigned long long ull;
const double eps= (1e-9);
using namespace std;
int dcmp(long double a,long double b){   return fabsl(a-b)<=eps ? 0: (a>b)? 1:-1  ;}
int getBit(int num, int idx) {return ((num >> idx) & 1) == 1;}
int setBit1(int num, int idx) {return num | (1<<idx);}
ll setBit0(ll num, int idx) {return num & ~(1ll<<idx);}
ll flipBit(int num, int idx) {return num ^ (1<<idx);}
void FS(){ ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);}
int countNumBit1(int mask) {int ret=0; while (mask)     {mask &= (mask-1);++ret;    }return ret;}
const int N=41;
int L[N],R[N],a[N][N],b[N][N],col[N],n,dist[N];
void dfs1(int no,int c,vector<int> &vis,vector<vector<int> > &v)
{
    vis[no]=1;
    col[no]=c;
    for(int i=0;i<sz(v[no]);i++)
    {
        int nw=v[no][i];
        if(vis[nw])
            continue;
        dfs1(nw,c^1,vis,v);
    }
}
vector< vector<int> > getbipart(vector<vector<int> > &v)
{
   vector<int> vis(N,0);
   for(int i=1;i<=n;i++)
   {
       if(vis[i]==0)
        dfs1(i,0,vis,v);
   }
   int cnt[2];
   clr(cnt,0);
   for(int i=1;i<=n;i++)
    cnt[col[i]]++;
   vector<vector<int> > ans;
    ans.resize(2);
    for(int i=1;i<=n;i++)
    {
        if(cnt[0]<=cnt[1])
        {
            if(col[i]==0)
            ans[0].pb(i);
            else
            ans[1].pb(i);
        }
        else
        {
            if(col[i]==1)
                ans[0].pb(i);
            else
                ans[1].pb(i);
        }
    }
    return ans;

}
#define NIL 0
const int inf=INT_MAX;
bool bfs(vector<int> &lf,vector<vector<int> > &v)
{
    queue<int> q;
    for(int i=0;i<sz(lf);i++)
    {
        int no=lf[i];
        if(R[no]==NIL)
        {
            dist[no]=0;
            q.push(no);
        }
        else
            dist[no]=inf;
    }
    dist[NIL]=inf;

    while(!q.empty())
    {
        int no=q.front();
        q.pop();

        if(dist[no]<dist[NIL])
        {
            for(int i=0;i<sz(v[no]);i++)
            {
                int nw=v[no][i];
                if(dist[L[nw]]==inf)
                {
                    dist[L[nw]]=dist[no]+1;
                    q.push(L[nw]);
                }
            }
        }
    }
    return dist[NIL]!=inf;
}
bool dfs(int no,vector<vector<int> > &v)
{
   if(no!=NIL)
   {

    for(int i=0;i<sz(v[no]);i++)
    {
        int nw=v[no][i];
        if(dist[L[nw]]==dist[no]+1)
        {
            if(dfs(L[nw],v))
            {
                L[nw]=no;
                R[no]=nw;
                return 1;
            }
        }
    }
    dist[no]=inf;
    return 0;
   }
   return 1;
}
int Hopkrap_carp(vector<int> &lf,vector<vector<int> > &v)
{
    int flows=0;
    for(int i=0;i<=n;i++)
        L[i]=NIL,R[i]=NIL;

    while(bfs(lf,v))
    {
        for(int i=0;i<sz(lf);i++)
        {
            int no=lf[i];
            if(R[no]==NIL&&dfs(no,v))
                flows++;
        }
    }
    return flows*2;
}
int solve(vector<vector<int> > &v)
{
    int lf=sz(v[0]),mx=0;

    for(int i=0;i<(1<<lf);i++)
    {
        vector<int> s1,s2;
        for(int j=0;j<lf;j++)
        {
            if(getBit(i,j)==1)
                s1.pb(v[0][j]);
        }
        for(int j=0;j<sz(v[1]);j++)
        {
            int no=v[1][j];
            bool ok=1;
            for(int k=0;k<sz(s1)&&ok;k++)
            {
                int nw=s1[k];
                if(a[no][nw]==1)
                    ok=0;
            }
            if(ok==1)
            {
                s2.pb(no);
            }
        }
        int in[N];
        clr(in,0);
        for(int j=0;j<sz(s2);j++)
            in[s2[j]]=1;
        for(int j=0;j<sz(s1);j++)
            in[s1[j]]=1;
        vector<vector<int> > adj(N),v4(N);
        vector<int> left;
        for(int j=1;j<=n;j++)
        {
            for(int k=1;k<=n;k++)
            {
                if(b[j][k]&&in[j]&&in[k]&&col[j]==0&&col[k]==1)
                    v4[j].pb(k),left.pb(j);
            }
        }

        int res=Hopkrap_carp(left,v4);
        mx=max(mx,res);
    }
    return mx;
}
int main()
{
    int T;
    scanf("%d",&T);
    while(T--)
    {
        scanf("%d",&n);
        vector<vector<int> > v1(N),v2(N);
        for(int i=1;i<=n;i++)
        {
            for(int j=1;j<=n;j++)
            {
                scanf("%d",&a[i][j]);
                if(a[i][j]==1)
                {
                    v1[i].pb(j);
                    v1[j].pb(i);
                }
            }
        }
        for(int i=1;i<=n;i++)
        {
            for(int j=1;j<=n;j++)
            {
                scanf("%d",&b[i][j]);
                if(b[i][j]==1)
                {
                    v2[i].pb(j);
                    v2[j].pb(i);
                }
            }
        }
        vector<vector<int> > v3=getbipart(v1);
        getbipart(v2);
        printf("%d\n",solve(v3));
    }
}
