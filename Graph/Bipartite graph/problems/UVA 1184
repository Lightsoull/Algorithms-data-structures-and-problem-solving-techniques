/*
Explanation: it is dircetly MPC (min path cover) problem, here i used hopcroft_krap algorithm only for the seek of implementing
it but the constrains are small so MCBM recursivly in (E*V) would work also. 
*/
#include <bits/stdc++.h>
#define sz(v)   ((int)(v).size())
#define  all(v)    ((v).begin()),((v).end())
#define  allr(v)    ((v).rbegin()),((v).rend())
#define   pb         push_back
#define   mp         make_pair
#define   mt         make_tuple
//#define   Y            imag()
//#define   X            real()
#define    clr(v,d)      memset( v, d ,sizeof(v))
#define   angle(n)      atan2((n.imag()),(n.real()))
#define   vec(a,b)       ((b)-(a))
#define   length(a)      hypot( (a.imag()),(a.real()) )
#define   normalize(a)      (a)/(length(a))
//#define    dp(a,b)          (((conj(a))*(b)).real())
//#define    cp(a,b)          (((conj(a))*(b)).imag())
#define    lengthsqrt(a)       dp(a,a)
#define    rotate0( a,ang)    ((a)*exp( point(0,ang) ))
#define    rotateA(about,p,ang)   (rotate0(vec(about,p),ang)+about)
#define    lcm(a,b)                ((a*b)/(__gcd(a,b)))
#define    reflection0(m,v)         (conj((v)/(m))*(m))
#define     reflectionA(m,v,p0)     (conj( (vec(p0,v))/(vec(p0,m)) ) * (vec(p0,m)) ) + p0
//#define     same(p1,p2)               ( dp(  vec(p1,p2),vec(p1,p2)) < eps )
#define     PT                    complex<double>
#define outfile freopen("out.out", "w", stdout);
#define infile  freopen("in.in", "r", stdin);
#define PI acos(-1)
typedef  long long     ll ;
typedef  unsigned long long ull;
const double eps= (1e-9);
using namespace std;
int dcmp(long double a,long double b){   return fabsl(a-b)<=eps ? 0: (a>b)? 1:-1  ;}
int getBit(int num, int idx) {return ((num >> idx) & 1) == 1;}
int setBit1(int num, int idx) {return num | (1<<idx);}
ll setBit0(ll num, int idx) {return num & ~(1ll<<idx);}
ll flipBit(int num, int idx) {return num ^ (1<<idx);}
void FS(){ ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);}
int countNumBit1(int mask) {int ret=0; while (mask)     {mask &= (mask-1);++ret;    }return ret;}
const int N=129;
int n,m,L[N],R[N],dist[N];
vector< vector<int> > v;
#define NIL 0
const int inf=INT_MAX;
void I()
{
    v.clear();
    v.resize(N);
}
bool bfs()
{
    queue<int> q;
    for(int i=1;i<=n;i++)
    {
        if(R[i]==NIL)
            dist[i]=0,q.push(i);
        else
            dist[i]=inf;
    }
    dist[NIL]=inf;

    while(!q.empty())
    {
        int no=q.front();
        q.pop();

        if(dist[no]<dist[NIL])
        {
            for(int i=0;i<sz(v[no]);i++)
            {
                int nw=v[no][i];
                if(dist[L[nw]]==inf)
                {
                    dist[L[nw]]=dist[no]+1;
                    q.push(L[nw]);
                }
            }
        }
    }
    return dist[NIL]!=inf;
}
bool dfs(int no)
{
   if(no!=NIL)
   {

    for(int i=0;i<sz(v[no]);i++)
    {
        int nw=v[no][i];
        if(dist[L[nw]]==dist[no]+1)
        {
            if(dfs(L[nw])==1)
            {
                L[nw]=no;
                R[no]=nw;
                return 1;
            }
        }
    }
    dist[no]=inf;
    return 0;
   }
   return 1;
}
int Hopcroft_karp()
{

   int flows=0;
   for(int i=1;i<=n;i++)
    L[i]=NIL;
   for(int i=1;i<=n;i++)
    R[i]=NIL;

   while(bfs())
   {
       for(int i=1;i<=n;i++)
         if(R[i]==NIL&&dfs(i))
           flows++;
   }
   return flows;
}
int main()
{

    int T;
    cin>>T;
    while(T--)
    {
        I();
       cin>>n>>m;
       for(int i=0;i<m;i++)
       {
           int f,t;
           cin>>f>>t;
           v[f].pb(t);
       }
       cout<< n-Hopcroft_karp()<<endl;
    }
}
