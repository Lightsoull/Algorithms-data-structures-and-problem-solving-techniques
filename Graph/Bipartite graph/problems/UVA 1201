/*
Note that the start of a node (city) and the end of the node will be always connected bec there is no constrain on that but
the point is whether the end of a node will be connected to a start of another node or not, so i will make a graph m nodes
on the left side(1 to m) and m nodes on the right side (1 to m) and just connect end node to the possible start nodes and get
the MCBM.
*/
#include <bits/stdc++.h>
#define sz(v)   ((int)(v).size())
#define  all(v)    ((v).begin()),((v).end())
#define  allr(v)    ((v).rbegin()),((v).rend())
#define   pb         push_back
#define   mp         make_pair
#define   mt         make_tuple
//#define   Y            imag()
//#define   X            real()
#define    clr(v,d)      memset( v, d ,sizeof(v))
#define   angle(n)      atan2((n.imag()),(n.real()))
#define   vec(a,b)       ((b)-(a))
#define   length(a)      hypot( (a.imag()),(a.real()) )
#define   normalize(a)      (a)/(length(a))
//#define    dp(a,b)          (((conj(a))*(b)).real())
//#define    cp(a,b)          (((conj(a))*(b)).imag())
#define    lengthsqrt(a)       dp(a,a)
#define    rotate0( a,ang)    ((a)*exp( point(0,ang) ))
#define    rotateA(about,p,ang)   (rotate0(vec(about,p),ang)+about)
#define    lcm(a,b)                ((a*b)/(__gcd(a,b)))
#define    reflection0(m,v)         (conj((v)/(m))*(m))
#define     reflectionA(m,v,p0)     (conj( (vec(p0,v))/(vec(p0,m)) ) * (vec(p0,m)) ) + p0
//#define     same(p1,p2)               ( dp(  vec(p1,p2),vec(p1,p2)) < eps )
#define     PT                    complex<double>
#define outfile freopen("out.out", "w", stdout);
#define infile  freopen("in.in", "r", stdin);
#define PI acos(-1)
typedef  long long     ll ;
typedef  unsigned long long ull;
const double eps= (1e-9);
using namespace std;
int dcmp(long double a,long double b){   return fabsl(a-b)<=eps ? 0: (a>b)? 1:-1  ;}
int getBit(int num, int idx) {return ((num >> idx) & 1) == 1;}
int setBit1(int num, int idx) {return num | (1<<idx);}
ll setBit0(ll num, int idx) {return num & ~(1ll<<idx);}
ll flipBit(int num, int idx) {return num ^ (1<<idx);}
void FS(){ ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);}
int countNumBit1(int mask) {int ret=0; while (mask)     {mask &= (mask-1);++ret;    }return ret;}
const int N=2*509;
bool visR[N],visL[N];
int L[N],R[N],m,s[N],e[N],a[N],b[N],c[N],d[N];
vector< vector<int> > v;
void I()
{
    v.clear();
    v.resize(N);
}
bool canmatch(int no)
{
    visL[no]=1;
    for(int i=0;i<sz(v[no]);i++)
    {
        int nw=v[no][i];
        if(visR[nw])
            continue;
        visR[nw]=1;
        if(L[nw]==-1||canmatch(L[nw]))
        {
            L[nw]=no; R[no]=nw;
            return 1;
        }
    }
    return 0;
}
int MCBM()
{
    int flow=0;
    clr(L,-1); clr(R,-1);
    for(int i=1;i<=m;i++)
    {
        clr(visR,0); clr(visL,0);
        if(R[i]==-1&&canmatch(i))
            flow++;
    }
    return flow;
}
int main()
{
    int T;
    cin>>T;

    while(T--)
    {
        I();
        cin>>m;

        for(int i=1;i<=m;i++)
        {
            int h1,m1;
            scanf("%d:%d",&h1,&m1);
            cin>>a[i]>>b[i]>>c[i]>>d[i];
            int dist= abs(a[i]-c[i])+abs(b[i]-d[i]);
            s[i]= h1*60+m1;
            e[i]= s[i]+dist;

        }
        for(int i=1;i<=m;i++)
        {

            int f=i;
            for(int j=1;j<=m;j++)
            {
                int t=j;
                int dist= abs(a[j]-c[i])+abs(b[j]-d[i]);
                if(e[f]+dist<=s[t]-1)
                    v[f].pb(t);
            }
        }
        cout<<m-MCBM()<<endl;
    }
}

