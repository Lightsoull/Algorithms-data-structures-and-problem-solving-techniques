//#include "grader.h"
#include <bits/stdc++.h>
#define sz(v)   ((int)(v).size())
#define  all(v)    ((v).begin()),((v).end())
#define  allr(v)    ((v).rbegin()),((v).rend())
#define   pb         push_back
#define   mp         make_pair
#define   mt         make_tuple
//#define   Y            imag()
//#define   X            real()
#define    clr(v,d)      memset( v, d ,sizeof(v))
#define   angle(n)      atan2((n.imag()),(n.real()))
#define   vec(a,b)       ((b)-(a))
//#define   length(a)      hypot( (a.imag()),(a.real()) )
#define   normalize(a)      (a)/(length(a))
//#define    dp(a,b)          (((conj(a))*(b)).real())
//#define    cp(a,b)          (((conj(a))*(b)).imag())
#define    lengthsqrt(a)       dp(a,a)
#define    rotate0( a,ang)    ((a)*exp( point(0,ang) ))
#define    rotateA(about,p,ang)   (rotate0(vec(about,p),ang)+about)
#define    reflection0(m,v)         (conj((v)/(m))*(m))
#define     reflectionA(m,v,p0)     (conj( (vec(p0,v))/(vec(p0,m)) ) * (vec(p0,m)) ) + p0
//#define     same(p1,p2)               ( dp(  vec(p1,p2),vec(p1,p2)) < eps )
#define     PT                    complex<double>
#define outfile freopen("out.out", "w", stdout);
#define infile  freopen("in.in", "r", stdin);
#define PI acos(-1)
typedef  long long     ll ;
typedef  unsigned long long ull;
const double eps= (1e-9);
using namespace std;
int dcmp(long double a,long double b){   return fabsl(a-b)<=eps ? 0: (a>b)? 1:-1  ;}
int getBit(int num, int idx) {return ((num >> idx) & 1) == 1;}
int setBit1(int num, int idx) {return num | (1<<idx);}
ll setBit0(ll num, int idx) {return num & ~(1ll<<idx);}
ll flipBit(int num, int idx) {return num ^ (1<<idx);}
void FS(){ ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);}
int n;
const int MAX=200009;
int N;
int c[MAX],b[MAX];
map<int,int> mb;
int rmb[MAX];
vector< vector< pair<int,int> > > v(MAX);
bool vis2[MAX],vis[MAX];
int ass(int no)
{
    if(mb.find(no)!=mb.end())
        return mb[no];
    int siz=sz(mb);
    mb[no]=siz+1;
    rmb[siz+1]=no;

    return mb[no];
}
void dfs(int node)
{
    vis2[node]=1;
    for(int i=0;i<sz(v[node]);i++)
    {
        int ch=v[node][i].first;
        int id=v[node][i].second;
        if(vis[id]||vis2[ch])
            continue;
        vis[id]=1;
        dfs(ch);
    }
}
bool is_connected()
{
    clr(vis2,0);
    clr(vis,0);
    dfs(1);

    for(int i=1;i<=N;i++)
    {
        if(vis2[i]==0&&sz(v[i])>0)
            return 0;
    }
    return 1;
}
bool is_eulerian()
{
    bool ret=is_connected();
    if(ret==0)
        return 0;
    int cnt=0;
    for(int i=1;i<=N;i++)
        if(sz(v[i])&1)
          cnt++;
    return (cnt<=2);
}
vector<int> circuit;
void dfs2(int node)
{
    for(int i=0;i<sz(v[node]);i++)
    {
        int ch=v[node][i].first;
        int id=v[node][i].second;
        if(vis[id])
            continue;
        vis[id]=1;

          dfs2(ch);
    }

    circuit.pb(node);

}
void dfs3(int node)
{
    while(sz(v[node]))
    {
        while(sz(v[node])&&vis[v[node].back().second])
            v[node].pop_back();
        if(sz(v[node])==0)
            break;
        vis[v[node].back().second]=1;
        dfs3(v[node].back().first);
    }
    circuit.pb(node);
}
void get_euler_path()
{
    clr(vis,0);
    int str=1;
    for(int i=1;i<=N;i++)
        if(sz(v[i])&1)
        {
            str=i;
            break;
        }
    dfs3(str);
    for(int i=sz(circuit)-1;i>=0;i--)
    {
        cout<<rmb[circuit[i]]<<" ";
    }
    cout<<endl;
}


int main()
{
    scanf("%d",&n);
    for(int i=0;i<n-1;i++)
    {
        scanf("%d",&b[i]);
    }
    for(int i=0;i<n-1;i++)
    {
       scanf("%d",&c[i]);
    }
    int str=-1,en=-1;
    for(int i=0;i<n-1;i++)
    {
        if(b[i]>c[i])
        {
            printf("-1\n");
            return 0;
        }
        int n1=ass(b[i]);
        int n2=ass(c[i]);

        v[n1].pb(mp(n2,i));
        v[n2].pb(mp(n1,i));
    }
    N=sz(mb);

    bool ret=is_eulerian();
    if(ret==0)
    {
        printf("-1\n");
        return 0;
    }

    get_euler_path();

}
