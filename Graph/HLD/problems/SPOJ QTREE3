#include <bits/stdc++.h>
#define sz(v)   ((int)(v).size())
#define  all(v)    ((v).begin()),((v).end())
#define  allr(v)    ((v).rbegin()),((v).rend())
#define   pb         push_back
#define   mp         make_pair
#define   mt         make_tuple
//#define   Y            imag()
//#define   X            real()
#define    clr(v,d)      memset( v, d ,sizeof(v))
#define   angle(n)      atan2((n.imag()),(n.real()))
#define   vec(a,b)       ((b)-(a))
//#define   length(a)      hypot( (a.imag()),(a.real()) )
#define   normalize(a)      (a)/(length(a))
//#define    dp(a,b)          (((conj(a))*(b)).real())
//#define    cp(a,b)          (((conj(a))*(b)).imag())
#define    lengthsqrt(a)       dp(a,a)
#define    rotate0( a,ang)    ((a)*exp( point(0,ang) ))
#define    rotateA(about,p,ang)   (rotate0(vec(about,p),ang)+about)
#define    lcm(a,b)                ((a*b)/(__gcd(a,b)))
#define    reflection0(m,v)         (conj((v)/(m))*(m))
#define     reflectionA(m,v,p0)     (conj( (vec(p0,v))/(vec(p0,m)) ) * (vec(p0,m)) ) + p0
//#define     same(p1,p2)               ( dp(  vec(p1,p2),vec(p1,p2)) < eps )
#define     PT                    complex<double>
#define outfile freopen("out.out", "w", stdout);
#define infile  freopen("in.in", "r", stdin);
#define PI acos(-1)
#define scani(n)  scanf("%d",&n)
#define scans(st) scanf("%s",st)
typedef  long long     ll ;
typedef  unsigned long long ull;
const double eps= (1e-9);
using namespace std;
int dcmp(long double a,long double b){   return fabsl(a-b)<=eps ? 0: (a>b)? 1:-1  ;}
int getBit(int num, int idx) {return ((num >> idx) & 1) == 1;}
int setBit1(int num, int idx) {return num | (1<<idx);}
ll setBit0(ll num, int idx) {return num & ~(1ll<<idx);}
ll flipBit(int num, int idx) {return num ^ (1<<idx);}
void FS(){ ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);}
const int MAXs=262143+9;
const int MAXv=100000+9;
int tree[MAXs],n,heavy[MAXv],par[MAXv],node_to_segid[MAXv],segid_to_node[MAXv],root[MAXv];
vector< vector<int> > v;
void I()
{
    v.clear();
    v.resize(MAXv);
}
int dfs_hld(int no)
{
    int siz=1,mx_siz=0;
    for(int i=0;i<sz(v[no]);i++)
    {
        int nw=v[no][i];
        if(nw==par[no])
            continue;
        par[nw]=no;
        int ret=dfs_hld(nw);
        if(ret>mx_siz)
        {
            mx_siz=ret;
            heavy[no]=nw;
        }
        siz+=ret;
    }
    return siz;
}
void buildchain()
{
    clr(heavy,-1);
    par[1]=-1;
    dfs_hld(1);
    int pos=0;
    for(int i=1;i<=n;i++)
    {
        if(par[i]==-1||heavy[par[i]]!=i)
        {
            for(int j=i;j!=-1;j=heavy[j])
            {
                root[j]=i;
                node_to_segid[j]=pos;
                segid_to_node[pos]=j;
                pos++;
            }
        }
    }
    clr(tree,0);
}
void update(int id,int s=0,int e=n-1,int p=1)
{
    if(s==e)
    {
        tree[p]^=1;
        return ;
    }
    int m=(s+e)/2;
    if(id<=m)
        update(id,s,m,p*2);
    else
        update(id,m+1,e,p*2+1);
 
    tree[p]=tree[p*2]+tree[p*2+1];
}
int res;
void zquery(int i)
{
    update(node_to_segid[i]);
}
int query2(int a,int b,int s=0,int e=n-1,int p=1)
{
    if(a>e||b<s||b<a)
        return -1;
    if(tree[p]==0)
        return -1;
    if(s==e)
    {
        return s;
    }
    int m=(s+e)/2;
    int ret=query2(a,b,s,m,p*2);
    if(ret!=-1)
        return ret;
    else
    {
       return query2(a,b,m+1,e,p*2+1);
    }
}
void oquery(int v)
{
    res=-1;
    vector< pair<int,int> > v1;
    int u=1;
    for(;root[v]!=root[u];v=par[root[v]])
    {
        v1.pb(mp(root[v],v));
    }
    v1.pb(mp(1,v));
    int siz=sz(v1)-1;
    for(int i=siz;i>=0;i--)
    {
        int f=v1[i].first; int t=v1[i].second;
 
        int ret=query2(node_to_segid[f],node_to_segid[t]);
        if(ret==-1)
            continue;
        res=segid_to_node[ret];
        return;
    }
 
}
int main()
{
    I();
    int q;
    scani(n);
    scani(q);
 
    for(int i=1;i<=n-1;i++)
    {
        int f,t;
        cin>>f>>t;
        v[f].pb(t);
        v[t].pb(f);
    }
 
    buildchain();
 
    while(q--)
    {
        int st;
        scani(st);
        if(st==0)
        {
            int i;
            scani(i);
            zquery(i);
        }
        else
        {
            int v;
            scani(v);
            oquery(v);
            printf("%d\n",res);
        }
    }
}
 
