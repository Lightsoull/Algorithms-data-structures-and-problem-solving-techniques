#include <bits/stdc++.h>
#define sz(v)   ((int)(v).size())
#define  all(v)    ((v).begin()),((v).end())
#define  allr(v)    ((v).rbegin()),((v).rend())
#define   pb         push_back
#define   mp         make_pair
#define   mt         make_tuple
//#define   Y            imag()
//#define   X            real()
#define    clr(v,d)      memset( v, d ,sizeof(v))
#define   angle(n)      atan2((n.imag()),(n.real()))
#define   vec(a,b)       ((b)-(a))
//#define   length(a)      hypot( (a.imag()),(a.real()) )
#define   normalize(a)      (a)/(length(a))
//#define    dp(a,b)          (((conj(a))*(b)).real())
//#define    cp(a,b)          (((conj(a))*(b)).imag())
#define    lengthsqrt(a)       dp(a,a)
#define    rotate0( a,ang)    ((a)*exp( point(0,ang) ))
#define    rotateA(about,p,ang)   (rotate0(vec(about,p),ang)+about)
#define    lcm(a,b)                ((a*b)/(__gcd(a,b)))
#define    reflection0(m,v)         (conj((v)/(m))*(m))
#define     reflectionA(m,v,p0)     (conj( (vec(p0,v))/(vec(p0,m)) ) * (vec(p0,m)) ) + p0
//#define     same(p1,p2)               ( dp(  vec(p1,p2),vec(p1,p2)) < eps )
#define     PT                    complex<double>
#define outfile freopen("out.out", "w", stdout);
#define infile  freopen("in.in", "r", stdin);
#define PI acos(-1)
typedef  long long     ll ;
typedef  unsigned long long ull;
const double eps= (1e-9);
using namespace std;
int dcmp(long double a,long double b){   return fabsl(a-b)<=eps ? 0: (a>b)? 1:-1  ;}
int getBit(int num, int idx) {return ((num >> idx) & 1) == 1;}
int setBit1(int num, int idx) {return num | (1<<idx);}
ll setBit0(ll num, int idx) {return num & ~(1ll<<idx);}
ll flipBit(int num, int idx) {return num ^ (1<<idx);}
void FS(){ ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);}
#define scani(n)  scanf("%d",&n)
#define scans(st) scanf("%s",st)
const int MAXv=10009;
const int MAXs=32767+9;
int tree[MAXs],n,par[MAXv],depth[MAXv],heavy[MAXv],edge_to[MAXv],segid_to_node[MAXv]
,node_to_segid[MAXv],root[MAXv],weight[MAXv];
vector< vector< pair< pair<int,int> ,int> > > v;
void I()
{
    v.clear();
    v.resize(MAXv);
}
int dfs_hld(int no)
{
    int siz=1,mx_siz=0;
    for(int i=0;i<sz(v[no]);i++)
    {
        int nw=v[no][i].first.first;
        int we=v[no][i].first.second;
        int id=v[no][i].second;

        if(nw==par[no])
            continue;
        par[nw]=no;
        edge_to[id]=nw;
        weight[nw]=we;
        depth[nw]=depth[no]+1;

        int ret=dfs_hld(nw);
        if(ret>mx_siz)
        {
            mx_siz=ret;
            heavy[no]=nw;
        }
        siz+=ret;
    }
    return siz;
}
void build(int s=0,int e=n-1,int p=1)
{
    if(s==e)
    {
        tree[p]=weight[segid_to_node[s]];
        return;
    }
    int m=(s+e)/2;
    build(s,m,p*2);
    build(m+1,e,p*2+1);
    tree[p]=tree[p*2]+tree[p*2+1];
}
int query(int a,int b,int s=0,int e=n-1,int p=1)
{
    if(b<s||a>e||b<a)
        return 0;
    if(s>=a&&e<=b)
        return tree[p];
    int m=(s+e)/2;
  return  query(a,b,s,m,p*2)+query(a,b,m+1,e,p*2+1);
}
void buildchain()
{
    clr(weight,0);
    clr(heavy,-1);
    par[1]=-1;
    depth[1]=0;

    dfs_hld(1);
    int pos=0;
    for(int i=1;i<=n;i++)
    {
        if(par[i]==-1||heavy[par[i]]!=i)
        {
            for(int j=i;j!=-1;j=heavy[j])
            {
                root[j]=i;
                node_to_segid[j]=pos;
                segid_to_node[pos]=j;
                pos++;
            }
        }
    }
    build();
}
int res=0;
bool isval_on_edge=1;
void chainquery(int l,int r)
{
    res+= query(l,r);
}
void dist_query(int u,int v)
{
    res=0;
    for(;root[u]!=root[v];v=par[root[v]])
    {
        if(depth[root[u]]>depth[root[v]])
            swap(u,v);
        chainquery(node_to_segid[root[v]],node_to_segid[v]);
    }
    if(depth[u]>depth[v])
        swap(u,v);
    if(!isval_on_edge||u!=v)
        chainquery(node_to_segid[u]+isval_on_edge,node_to_segid[v]);
}
int k;
bool check(int a)
{
    int b= root[a];
    int id1= node_to_segid[b];
    int id2= node_to_segid[a];
    int rg= (id2-id1+1);
    if(rg<k)
    {
        k-=rg;
        return 0;
    }
    else
    {
       int id3=id2-k+1;
       res=segid_to_node[id3];
       return 1;
    }
}
bool check2(int b,int a)
{
    int id1= node_to_segid[b];
    int id2= node_to_segid[a];
    int rg= (id2-id1+1);
    if(rg<k)
    {
        k-=rg;
        return 0;
    }
    else
    {
        int id3= id2-k+1;
        res= segid_to_node[id3];
        return 1;
    }
}
bool check3(int a,int b)
{
    int id1= node_to_segid[a];
    int id2= node_to_segid[b];
    int rg=(id2-id1+1);

    if(rg<k)
    {
        k-=rg;
        return 0;
    }
    else
    {
        int id3= id1+k-1;
        res= segid_to_node[id3];
        return 1;

    }
}
void kth_query(int ou,int ov,int ok)
{
    res=0;
    int u=ou,v=ov;
    k=ok;
    for(;root[u]!=root[v];v=par[root[v]])
    {
        if(depth[root[u]]>depth[root[v]])
            swap(u,v);
    }
    int myroot=root[u];

    int u1,v1;
    u=ou; v=ov;
    for(;root[u]!=myroot;u=par[root[u]])
    {
        if(check(u))
            return;
    }
    u1=u;
    int sum=0;
    for(;root[v]!=myroot;v=par[root[v]])
    {
          int rg= node_to_segid[v]-node_to_segid[root[v]]+1;
          sum+=rg;
    }
    v1=v;
    int dec=1;
    if(depth[u1]>depth[v1])
    {
        dec=0;
    }
    if(dec==0)
    {
        if(check2(v1,u1))
            return;
    }
    else
    {
        if(check3(u1,v1))
            return;
    }

    v=ov;
    k= sum-k+1;
    for(;root[v]!=myroot;v=par[root[v]])
    {
         if(check(v))
            return ;
    }

}
int main()
{
    int T;
    scani(T);
    while(T--)
    {
        I();
        scani(n);
        for(int i=1;i<=n-1;i++)
        {
            int f,t,w;
            scani(f); scani(t); scani(w);
            v[f].pb(mp(mp(t,w),i));
            v[t].pb(mp(mp(f,w),i));
        }
        buildchain();
        while(1)
        {
            char st[20];
            scans(st);
            if(st[0]=='D'&&st[1]=='O')
                break;
            if(st[0]=='D')
            {
                int a,b;
                scani(a); scani(b);
                dist_query(a,b);
                printf("%d\n",res);
            }
            else
            {
                int k,a,b;
                scani(a); scani(b); scani(k);
                kth_query(a,b,k);
                printf("%d\n",res);
            }
        }
    }
}
