/*
it is TLE but it is true, the AC solution used presited segment tree not by hld.
Explanation: i used merge sort tree for each chain to get the number of elements <= x, where x is decided by binary search.
*/
#include <bits/stdc++.h>
#define sz(v)   ((int)(v).size())
#define  all(v)    ((v).begin()),((v).end())
#define  allr(v)    ((v).rbegin()),((v).rend())
#define   pb         push_back
#define   mp         make_pair
#define   mt         make_tuple
//#define   Y            imag()
//#define   X            real()
#define    clr(v,d)      memset( v, d ,sizeof(v))
#define   angle(n)      atan2((n.imag()),(n.real()))
#define   vec(a,b)       ((b)-(a))
//#define   length(a)      hypot( (a.imag()),(a.real()) )
#define   normalize(a)      (a)/(length(a))
//#define    dp(a,b)          (((conj(a))*(b)).real())
//#define    cp(a,b)          (((conj(a))*(b)).imag())
#define    lengthsqrt(a)       dp(a,a)
#define    rotate0( a,ang)    ((a)*exp( point(0,ang) ))
#define    rotateA(about,p,ang)   (rotate0(vec(about,p),ang)+about)
#define    lcm(a,b)                ((a*b)/(__gcd(a,b)))
#define    reflection0(m,v)         (conj((v)/(m))*(m))
#define     reflectionA(m,v,p0)     (conj( (vec(p0,v))/(vec(p0,m)) ) * (vec(p0,m)) ) + p0
//#define     same(p1,p2)               ( dp(  vec(p1,p2),vec(p1,p2)) < eps )
#define     PT                    complex<double>
#define outfile freopen("out.out", "w", stdout);
#define infile  freopen("in.in", "r", stdin);
#define PI acos(-1)
#define scani(n)  scanf("%d",&n)
#define scans(st) scanf("%s",st)
typedef  long long     ll ;
typedef  unsigned long long ull;
const double eps= (1e-9);
using namespace std;
int dcmp(long double a,long double b){   return fabsl(a-b)<=eps ? 0: (a>b)? 1:-1  ;}
int getBit(int num, int idx) {return ((num >> idx) & 1) == 1;}
int setBit1(int num, int idx) {return num | (1<<idx);}
ll setBit0(ll num, int idx) {return num & ~(1ll<<idx);}
ll flipBit(int num, int idx) {return num ^ (1<<idx);}
void FS(){ ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);}
const int MAXs=262143+9;
const int MAXv=300000+9;
int n,heavy[MAXv],depth[MAXv],par[MAXv],root[MAXv],chain[MAXv],k,mb[MAXv],weight[MAXv],node_to_segid[MAXv]
,segid_to_node[MAXv];
vector<pair<int,int> > v2;
vector< vector<int> > v;
vector<int> tree[MAXs];
void I()
{
    v.clear();
    v.resize(MAXv);
}
int dfs_hld(int no)
{
    int mx_siz=0,siz=1;
    for(int i=0;i<sz(v[no]);i++)
    {
        int nw=v[no][i];
        if(nw==par[no])
            continue;
        par[nw]=no;
        depth[nw]=depth[no]+1;
 
        int ret=dfs_hld(nw);
        if(ret>mx_siz)
        {
            mx_siz=ret;
            heavy[no]=nw;
        }
        siz+=ret;
    }
    return siz;
}
void Merge(int p)
{
    int i=0,j=0;
    for(;i<sz(tree[p*2])&&j<sz(tree[p*2+1]);)
    {
        while(i<sz(tree[p*2])&&tree[p*2][i]<=tree[p*2+1][j])
        {
            tree[p].pb(tree[p*2][i]);
            i++;
        }
        while(j<sz(tree[p*2+1])&&tree[p*2+1][j]<=tree[p*2][i])
        {
            tree[p].pb(tree[p*2+1][j]);
            j++;
        }
    }
        while(j<sz(tree[p*2+1]))
        {
            tree[p].pb(tree[p*2+1][j]);
            j++;
        }
        while(i<sz(tree[p*2]))
        {
            tree[p].pb(tree[p*2][i]);
            i++;
        }
}
void build(int s=0,int e=n-1,int p=1)
{
    if(s==e)
    {
        int no= weight[segid_to_node[s]];
        tree[p].pb(no);
        return;
    }
    int m=(s+e)/2;
    build(s,m,p*2);
    build(m+1,e,p*2+1);
    Merge(p);
}
int query(int a,int b,int val,int s=0,int e=n-1,int p=1)
{
    if(b<s||a>e||b<a)
        return 0;
    if(s>=a&&e<=b)
    {
       return (lower_bound(all(tree[p]),val)-tree[p].begin());
    }
    int m=(s+e)/2;
    return query(a,b,val,s,m,p*2)+query(a,b,val,m+1,e,p*2+1);
}
void buildchain()
{
    par[1]=-1;
    clr(heavy,-1);
    depth[1]=0;
 
    dfs_hld(1);
 
    int pos=0;
    for(int i=1;i<=n;i++)
    {
        if(par[i]==-1||heavy[par[i]]!=i)
        {
            for(int j=i;j!=-1;j=heavy[j])
            {
                root[j]=i;
                node_to_segid[j]=pos;
                segid_to_node[pos]=j;
                pos++;
            }
        }
    }
 
   build();
 
}
bool check(int mid)
{
    int val= mb[mid];
    int ans=0;
    for(int i=0;i<sz(v2);i++)
    {
        int l=v2[i].first,r=v2[i].second;
 
        ans+= query(l,r,val);
    }
    return (ans<=k-1);
}
int BS(int l,int r)
{
    int ans=0;
    while(l<=r)
    {
        int mid=(l+r)/2;
        if(check(mid))
        {
            ans=mb[mid];
            l=mid+1;
        }
        else
        {
            r=mid-1;
        }
    }
    return ans;
}
int W;
int query(int u,int v)
{
    v2.clear();
    for(;root[u]!=root[v];v=par[root[v]])
    {
        if(depth[root[u]]>depth[root[v]])
            swap(u,v);
 
        v2.pb(mp(node_to_segid[root[v]],node_to_segid[v]));
    }
    if(depth[u]>depth[v])
        swap(u,v);
    v2.pb(mp(node_to_segid[u],node_to_segid[v]));
 
    return BS(0,W-1);
}
int main()
{
    I();
    int m;
    scani(n);
    scani(m);
    vector<int> we;
    for(int i=1;i<=n;i++)
    {
        int w;
        scani(w);
        we.pb(w);
        weight[i]=w;
    }
    sort(all(we));
    we.resize(unique(all(we))-we.begin());
    for(int i=1;i<=n-1;i++)
    {
        int f,t;
        scani(f);
        scani(t);
        v[f].pb(t);
        v[t].pb(f);
    }
 
    W=0;
 
    for(int i=0;i<sz(we);i++)
    {
        int val=we[i];
        mb[W]=val;
        W++;
    }
 
    buildchain();
    while(m--)
    {
        int u,v;
        scani(u);
        scani(v);
        scani(k);
        printf("%d\n",query(u,v));
 
    }
}
 
 
