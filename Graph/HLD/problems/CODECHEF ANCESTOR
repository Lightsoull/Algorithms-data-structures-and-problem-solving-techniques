#include <bits/stdc++.h>
#define sz(v)   ((int)(v).size())
#define  all(v)    ((v).begin()),((v).end())
#define  allr(v)    ((v).rbegin()),((v).rend())
#define   pb         push_back
#define   mp         make_pair
#define   mt         make_tuple
//#define   Y            imag()
//#define   X            real()
#define    clr(v,d)      memset( v, d ,sizeof(v))
#define   angle(n)      atan2((n.imag()),(n.real()))
#define   vec(a,b)       ((b)-(a))
//#define   length(a)      hypot( (a.imag()),(a.real()) )
#define   normalize(a)      (a)/(length(a))
//#define    dp(a,b)          (((conj(a))*(b)).real())
//#define    cp(a,b)          (((conj(a))*(b)).imag())
#define    lengthsqrt(a)       dp(a,a)
#define    rotate0( a,ang)    ((a)*exp( point(0,ang) ))
#define    rotateA(about,p,ang)   (rotate0(vec(about,p),ang)+about)
#define    lcm(a,b)                ((a*b)/(__gcd(a,b)))
#define    reflection0(m,v)         (conj((v)/(m))*(m))
#define     reflectionA(m,v,p0)     (conj( (vec(p0,v))/(vec(p0,m)) ) * (vec(p0,m)) ) + p0
//#define     same(p1,p2)               ( dp(  vec(p1,p2),vec(p1,p2)) < eps )
#define     PT                    complex<double>
#define outfile freopen("out.out", "w", stdout);
#define infile  freopen("in.in", "r", stdin);
#define PI acos(-1)
#define scani(n)  scanf("%d",&n)
//#define scans(st) scanf("%s",st)
#define gc getchar_unlocked
typedef  long long     ll ;
typedef  unsigned long long ull;
const double eps= (1e-9);
using namespace std;
int dcmp(long double a,long double b){   return fabsl(a-b)<=eps ? 0: (a>b)? 1:-1  ;}
int getBit(int num, int idx) {return ((num >> idx) & 1) == 1;}
int setBit1(int num, int idx) {return num | (1<<idx);}
ll setBit0(ll num, int idx) {return num & ~(1ll<<idx);}
ll flipBit(int num, int idx) {return num ^ (1<<idx);}
void FS(){ ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);}
const int N=500009;
int root[N],heavy[N],par[N],n,segid[N];
ll ans[N],tree[N*4];
vector< vector<int> > v1,v2;
void I()
{
    v1.clear();
    v2.clear();
    v1.resize(n+9);
    v2.resize(n+9);
}
int dfs_hld(int no,int p)
{
    int mx_siz=0,tot_siz=1;
    for(int i=0;i<sz(v1[no]);i++)
    {
        int nw=v1[no][i];
        if(nw==p)
            continue;

        par[nw]=no;
        int siz=dfs_hld(nw,no);
        if(siz>=mx_siz)
        {
            mx_siz=siz;
            heavy[no]=nw;
        }
        tot_siz+=siz;
    }
    return tot_siz;
}
void build_hld()
{
    for(int i=0;i<=n;i++)
        heavy[i]=-1;
    for(int i=0;i<=4*n;i++)
        tree[i]=0;

    par[1]=-1;
    dfs_hld(1,0);
    int pos=0;
    for(int i=1;i<=n;i++)
    {
        if(par[i]==-1||heavy[par[i]]!=i)
        {
            for(int j=i;j!=-1;j=heavy[j])
            {
                segid[j]=pos++;
                root[j]=i;
            }
        }
    }

}
void update(int id,int val,int s=0,int e=n-1,int p=1)
{
    if(s==e)
    {
        tree[p]=val;
        return ;
    }

    int mid=(s+e)/2;
    if(id<=mid)
        update(id,val,s,mid,p*2);
    else
        update(id,val,mid+1,e,p*2+1);
    tree[p]=tree[p*2]+tree[p*2+1];
}
ll query(int a,int b,int s=0,int e=n-1,int p=1)
{
    if(a>e||b<s)
        return 0;
    if(s>=a&&e<=b)
    {
        return tree[p];
    }
    int mid=(s+e)/2;
    return query(a,b,s,mid,p*2)+query(a,b,mid+1,e,p*2+1);
}
ll solve(int no)
{
    ll ans=0;
    while(no!=-1)
    {
        ans+=query(segid[root[no]],segid[no]);
        no=par[root[no]];
    }
    return ans;
}
void dfs(int no,int p)
{
    ans[no]=solve(no);
    update(segid[no],1);
    for(int i=0;i<sz(v2[no]);i++)
    {
        int nw=v2[no][i];
        if(nw==p)
            continue;
        dfs(nw,no);
    }
    update(segid[no],0);

}
int main()
{
    FS();
    int T;
    cin>>T;
    while(T--)
    {

        cin>>n;
        I();
        for(int i=0;i<n-1;i++)
        {
            int f,t;
            cin>>f>>t;
            v1[f].pb(t);
            v1[t].pb(f);
        }
        for(int i=0;i<n-1;i++)
        {
            int f,t;
            cin>>f>>t;
            v2[f].pb(t);
            v2[t].pb(f);
        }
        build_hld();

        dfs(1,0);

        for(int i=1;i<=n;i++)
            cout<<ans[i]<<" ";
    }
}
