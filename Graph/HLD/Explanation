Sources: 
-2 videos mostafa saad.
-https://blog.anudeep2011.com/heavy-light-decomposition/

Notes
- HLD can be applied on (directed/undirected trees)
- for HLD it won't differ if you considered a certain node to be the root of the tree or any other node.
- it can be considered as a new way to get the lca in logn for each query.
- observe that all the chains are going in one direction from buttom to up only it doesn't turn (eg: from buttom to up to buttom).
- always use Fast input/output for HLD bec it works in (logn)^2 so it easy TLE.
- the height of the tree is logn bec the max path in the tree is contain logn chains.

some expersions
- heavy node is the node that has max number of nodes in its subtree.
- light node is the not heavy node.
- heavy edge is the edge to the heavy node.
- light edge is the edge to the light node.

Example CODE
------------
const int MAXs=32770+9;
const int MAXv=10009;
int tree[MAXs],n,res,par[MAXv],root[MAXv],depth[MAXv],heavy[MAXv],edge_to[MAXv],segid_to_node[MAXv],node_to_segid[MAXv]
,weight[MAXv];
vector< vector<pair<pair<int,int>,int>> > v;
bool isval_on_edge;
void I()
{
    v.clear();
    v.resize(MAXv);
}
int dfs_hld(int no)
{
    int tree_size=1,mx_siz=0;
    for(int i=0;i<sz(v[no]);i++)
    {
        int nw=v[no][i].first.first;
        int we= v[no][i].first.second;
        int id= v[no][i].second;

        if(nw==par[no])
            continue;
        edge_to[id]=nw;
        weight[nw]=we;
        par[nw]=no;
        depth[nw]=depth[no]+1;

        int siz=dfs_hld(nw);
        if(siz>mx_siz)
        {
            mx_siz=siz;
            heavy[no]=nw;
        }
        tree_size+=siz;
    }
    return tree_size;
}
void build(int s=0,int e=n-1,int p=1)
{
    if(s==e)
    {
        tree[p]= weight[segid_to_node[s]];
        return;
    }
    int m=(s+e)/2;
    build(s,m,p*2);
    build(m+1,e,p*2+1);
    tree[p]=max(tree[p*2],tree[p*2+1]);
}
void update(int idx,int val,int s=0,int e=n-1,int p=1)
{
    if(s==e)
    {
        tree[p]=val;
        return;
    }
    int m=(s+e)/2;
    if(idx<=m)
        update(idx,val,s,m,p*2);
    else
        update(idx,val,m+1,e,p*2+1);
    tree[p]=max(tree[p*2],tree[p*2+1]);
}
int query(int a,int b,int s=0,int e=n-1,int p=1)
{
    if(a>e||b<s||b<a)
        return 0;
    if(s>=a&&e<=b)
    {
        return tree[p];
    }
    int m=(s+e)/2;
    return max(query(a,b,s,m,p*2),query(a,b,m+1,e,p*2+1));
}
void build_chains()
{
    clr(par,-1);
    clr(depth,0);
    clr(heavy,-1);
    clr(weight,0);

    dfs_hld(1);
    int pos=0;
    for(int i=1;i<=n;i++)
    {
        if(par[i]==-1||heavy[par[i]]!=i)
        {
            for(int j=i;j!=-1;j=heavy[j])
            {
                root[j]=i;
                node_to_segid[j]=pos;
                segid_to_node[pos]=j;
                pos++;
            }
        }
    }

    build();
}
void change_query(int i,int val)
{
    int id= edge_to[i];
    update(node_to_segid[id],val);
}
void chainquery(int l,int r)
{
    res=max(res,query(l,r));
}
int getvalue_query(int u,int v)
{
    res=0;
    for(;root[u]!=root[v];v=par[root[v]])
    {
        if(depth[root[u]]>depth[root[v]])
            swap(u,v);
        chainquery(node_to_segid[root[v]],node_to_segid[v]);
    }
    if(depth[u]>depth[v])
        swap(u,v);
    if(!isval_on_edge||u!=v)
        chainquery(node_to_segid[u]+1,node_to_segid[v]);
}
int main()
{
    int T;
    scanf("%d",&T);

    while(T--)
    {
        I();
        scanf("%d",&n);
        isval_on_edge=1;
        for(int i=1;i<=n-1;i++)
        {
            int f,t,w;
            scanf("%d",&f); scanf("%d",&t); scanf("%d",&w);
            v[f].pb(mp(mp(t,w),i));
            v[t].pb(mp(mp(f,w),i));
        }
        build_chains();
        while(1)
        {
            char st[29];
            scanf("%s",st);
            if(st[0]=='D')
                break;
            if(st[0]=='C')
            {
                int i,val;
                scanf("%d",&i); scanf("%d",&val);
                change_query(i,val);
            }
            else
            {
                int a,b;
                scanf("%d",&a); scanf("%d",&b);
                getvalue_query(a,b);
                printf("%d\n",res);
            }
        }
    }
}
----------------------------------------------------------------------------------------------------------------------------------------





























