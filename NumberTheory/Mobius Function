Sources:
https://www.geeksforgeeks.org/program-mobius-function/
https://www.geeksforgeeks.org/program-for-mobius-function-set-2/

Explanation:
it is a multiplicative function, for any positive integer n, F[n]= 1 if n=1, f[n]=0 if n contain a squared prime factor, f[n]=(-1)^k
if n is the product of k distinct prime factors.

CODE for getting the value of mobius function for an element.
Complexity: sqrt(n).
// Program to print all prime factors 
# include <bits/stdc++.h> 
using namespace std; 

// Returns value of mobius() 
int mobius(int n) 
{ 
	int p = 0; 

	// Handling 2 separately 
	if (n%2 == 0) 
	{ 
		n = n/2; 
		p++; 

		// If 2^2 also divides N 
		if (n % 2 == 0) 
		return 0; 
	} 

	// Check for all other prine factors 
	for (int i = 3; i <= sqrt(n); i = i+2) 
	{ 
		// If i divides n 
		if (n%i == 0) 
		{ 
			n = n/i; 
			p++; 

			// If i^2 also divides N 
			if (n % i == 0) 
			return 0; 
		} 
	} 

	return (p % 2 == 0)? -1 : 1; 
} 

// Driver code 
int main() 
{ 
	int N = 17; 
	cout << "Mobius Functions M(N) at N = " << N << " is: "
		<< mobius(N) << endl; 
	cout << "Mobius Functions M(N) at N = " << 25 << " is: "
		<< mobius(25) << endl; 
	cout << "Mobius Functions M(N) at N = " << 6 << " is: "
		<< mobius(6) << endl; 
} 
---------------------------------------------------------------------------------------------------------------------------------------
code for getting mobius function for a range of numbers from 1 to N.
// C++ implementation of the approach 
#include <bits/stdc++.h> 
using namespace std; 
#define N 100005 

int lpf[N]; 

// Function to calculate least 
// prime factor of each number 
void least_prime_factor() 
{ 
	for (int i = 2; i < N; i++) 

		// If it is a prime number 
		if (!lpf[i]) 

			for (int j = i; j < N; j += i) 

				// For all multiples which are not 
				// visited yet. 
				if (!lpf[j]) 
					lpf[j] = i; 
} 

// Function to find the value of Mobius function 
// for all the numbers from 1 to n 
void Mobius(int n) 
{ 
	// To store the values of Mobius function 
	int mobius[N]; 

	for (int i = 1; i < N; i++) { 

		// If number is one 
		if (i == 1) 
			mobius[i] = 1; 
		else { 

			// If number has a squared prime factor 
			if (lpf[i / lpf[i]] == lpf[i]) 
				mobius[i] = 0; 

			// Multiply -1 with the previous number 
			else
				mobius[i] = -1 * mobius[i / lpf[i]]; 
		} 
	} 

	for (int i = 1; i <= n; i++) 
		cout << mobius[i] << " "; 
} 

// Driver code 
int main() 
{ 
	int n = 5; 

	// Function to find least prime factor 
	least_prime_factor(); 

	// Function to find mobius function 
	Mobius(n); 
} 
----------------------------------------------------------------------------------------------------------------------------------------






