-Permitive Roots and how to get them
For a prime number p, r is a primitive root if and only if it's exponents r, r2, r3, ... , rp-1 are distinct (mod p). ( r<P )

how to solve the problem easily?
Some terms

Φ(n) : Euler's totient function counts the positive integers up to a given integer n that are relatively prime to n.
Multiplicative order : In number theory, given an integer a and a positive integer n with gcd(a,n) = 1, the multiplicative order of a 
modulo n is the smallest positive integer k with  a^k = 1 (mod n).

As far as I know, there is no simple formula known yet to find primitive roots, however, there is a faster way to test whether a
number is a primitive root rather than simply trying out all candidates. This technique can be derived from the definition 
of primitive roots. From its alternate definition, we know, if the multiplicative order of a number g modulo n is equal to 
φ(n), then g is a primitive root. In fact, the converse is also true, g is a primitive root modulo n if the multiplicative order of g 
is φ(n). From this axiom, we get a way to test whether, for any given g and n, g is a primitive root modulo n, as follows:

First we compute φ(n), [ In case n is a prime p, φ(n) = p-1 ]
Factorize φ(n), let it has k different prime factors p1, p2, ... , pk, [ Even if m is as large as 231, k will be around 32 ]
Compute gφ(n)/pi mod n; { for i = 1, 2, 3, ... ,k }. Using a successive squaring algorithm, this can be done very easily and fast. 
If all the k results are different than 1, then g is a primitive root modulo n.

CODE
const int MAXN=70000;
int flag[MAXN];
ll prime[MAXN];
ll total;

// works in O(N) or abit larger

void seive(){
    flag[0]=flag[1]=1;
    for(ll i=2; i*i<=MAXN; i++)
    {
        if(flag[i]==1) continue;
       
        for(ll j=i*i; j<=MAXN; j+=i)
        {
            flag[j]=1;
        }

    }

}
----------------------------------------------------------------------------------------------------------------------------------------
int mypow(int b,int p)
{
     if(p==0)
     return 1;
     
     if(p&1)
     return b*mypow(b*b,p/2);
     else
     return mypow(b*b,p/2);
     
}
----------------------------------------------------------------------------------------------------------------------------------------
void theprimefactors(int n)
{
    int N=n;

    for(int i=0;i<sz(pr);i++)  // put all the prime numbers you will need using sieve
    {
        int pm=pr[i];
        if(pm*pm>n)
            break;
        if(n==1)
            break;
        while(n%pr[i]==0)
        {
            n/=pr[i];
            primefactors.pb(pr[i]);
        }

    }

    if(n>1)
    {
       primefactors.pb(n);

    }

}
- there is a trick that may fast the primefact instead of looping on all the numbers at for loop, loop only on the prime numbers in the
range from 2 to squrt(n).

- // works in squrt(n)
-------------------------------------------------------------------------------------------------------------------------------------------
// i <= sqrt(n)      power 2 sides
// i * i <= n        Integer version

bool isprime(ll n)
{   // O( sqrt(n)
   
    if(n == 2)    
    return true;
 
    if(n < 2 || n%2 == 0)   
    return false;
 
    for(ll i=3; i*i <= n; i+=2)
    {
        total_operations++;
        if(n%i == 0)
            return false;
    }
    return true;
}
 ---------------------------------------------------------------------------------------------------------------------------------------
 Notes on primes
 
 1- Fermat's little theorem
 for any interger a and prime number p (a^p mod p)=(a mod p)
 
 2- a^(p-1) = 1 (mod p)
 
 3-The cancellation law
 if u,x,y are integers and prime number p
 ux = uy (mod p)
 we can cancel u from both sides but iff u and p are relatively prime
 
 4- for N<=10^9 the gab between the primes is <= 300.
 ---------------------------------------------------------------------------------------------------------------------------------------
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
