Sources: https://www.youtube.com/watch?v=j4SNmckTZYI
         http://e-maxx.ru/algo/euler_function
         
-used for: phi function gets the number of positive integers i such that < or <= n such that gcd(i,n) = 1.
-Facts about the phi function:
1-phi(p) = (p-1) iff p is prime.
2-if phi(a*b*c) = phi(a)*phi(b)*phi(c)  iff a,b,c are pairwise co-primes.
3-phi( p^k ) = p^k - p^(k-1) = p^(k-1) *(p-1) = p^k * (1-1/p) , for k>=1 and p is prime.
4- phi series: phi(n) = 1, 1, 2, 2, 4, 2, 6, 4, 6, 4, 10, 4, 12, 6, 8,
8, 16, 6, 18, 8, 12, 10, 22, 8, 20, 12, 18, 12, 28,
8, 30, 16, 20, 16, 24, 12, 36, 18, 24, 16, 40, 12.
phi(n) is even for n>2.
5- sqrt(n)<= phi(n) <= n-sqrt(n) , except for phi(2) and phi(6).
6- phi(n^k) = n^(k-1) * phi(n).
7- let d(i) be the ith divisor of n , sigma (phi( d(i) ))=n.

Getting phi(n) CODE
#include <stdio.h> 
int phi(int n) 
{ 
    int result = n; // Initialize result as n 
  
    // Consider all prime factors of n and subtract their 
    // multiples from result 
    for (int p = 2; p * p <= n; ++p) { 
          
        // Check if p is a prime factor. 
        if (n % p == 0) { 
              
            // If yes, then update n and result 
            while (n % p == 0) 
                n /= p; 
            result -= result / p; 
        } 
    } 
  
    // If n has a prime factor greater than sqrt(n) 
    // (There can be at-most one such prime factor) 
    if (n > 1) 
        result -= result / n; 
    return result; 
} 
  
// Driver program to test above function 
int main() 
{ 
    int n; 
    for (n = 1; n <= 10; n++) 
        printf("phi(%d) = %d\n", n, phi(n)); 
    return 0; 
} 
------------------------------------------------------------------------
Getting phi(i) for every i<=n CODE
void Phi_inrange(int n)
{
    for(int i=1;i<=n;i++)
        phi[i]=1;
    
    notprime[1]=notprime[0]=1;
    for(int i=2;i<=n;i++)
    {
        if(notprime[i]==1)
         continue;
        phi[i]=(i-1);
        for(int j=i*2;j<=n;j+=i)
        {
            notprime[j]=1;
            int num=j;
            int cnt=0;
            while(num%i==0)
            {
                num/=i;
                cnt++;
            }
            phi[j]*=cnt*(j-1);
        }
    }
}
------------------------------------------------------------------------
phi factorial code phi( N! )
Equation : phi(N!) = ( isprime(N) ? N-1 : N) * phi( (N-1)! ).
 can be done recursively and iteratively.
 CODE iterative way.
 
 int phi_factorial(int n)
{
    int ret=1;
    for(int i=2;i<=n;i++)
    {
        ret= ret*(isprime(i)? i-1:i);
    }
    return ret;
}

------------------------------------------------------------------------
Applications on it.
1- Fermat theorem : a^(phi(m)) = 1 (mod m) iff gcd(m,a)=1.
2- (a^(b))%mod =  (a^(b%(phi(mod))) ) %mod, so if i have a large power and i want it mod 
----------------------------------------------------------------------------------------------------------------------------------------





