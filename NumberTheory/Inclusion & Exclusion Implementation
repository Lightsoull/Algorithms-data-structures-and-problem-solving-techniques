/*
Inclusion and Exclusion Complexity:
sometimes it is complexity could be linear and sometimes it can be expontional (2^n), the idea is that let the whole set is A and have N cells and i want to 
get the union of the N cells so at first i will add the whole set then i will subtract all the intersections to get the intersections itself add all the odd number
combination of cells and subtract all the even number combination of cells, some times i will need to iteratite on all the combinations and sometimes i don't need to
if i don't need it could be in linear time.

explanation : 

if i have n sets okay the ( A(i) U A(i+1) U A(i+2) U A(i+3) ... U A(n) ) equal what ??

The verbal formula
The inclusion-exclusion principle can be expressed as follows:
To compute the size of a union of multiple sets, it is necessary to sum the sizes of these sets separately,
and then subtract the sizes of all pairwise intersections of the sets, then add back the size of the intersections
of triples of the sets, subtract the size of quadruples of the sets, and so on, up to the intersection of all sets.

implementation using masks

    ll sol=0;
    int cnt=0;
    for(int i=1;i<(1<<n);i++)
    {
        ll rs=1;
        cnt=0;
        for(int j=0;j<n;j++)
        {
          if(getBit(i,j)==1)
          {
            rs=lcm(rs,A[j]);     // Do A[j] intersects...
            cnt++;
          }

        }
        if(cnt%2==0)
            sol-=n/rs;
        else
            sol+=n/rs;
    }
    cout<<sol<<endl;

---------------------------------------------------------------------------------------------------------------
























