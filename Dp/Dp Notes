-At Dp buttom up approach if i want to continue in the same path it can be dp[i][j]=dp[i][j-1] here i keep going in the same path but 
adding one extra j.
-------------------------------------------------------------------------------------------------------------------------------------------
-At Dp buttom up if you have an index which express the last position of a certain ith element and the next one i+1th can be after the
pervious one position with T positions 1<=T<=N so instead of making another loop to decide the the value of T, you can consider that the
T will be with one at the begining so dp[i+1][pos]=dp[i][pos-1] then if T will be 2 means that i will take from the i+1th element one
dp[i+1][pos]=dp[i+1][pos-1] so this will in n^2 instead of n^3.
-------------------------------------------------------------------------------------------------------------------------------------------
Note: assume that there is an integer sequence s contains only 1 or 2 numbers and you want to calulate the product of all the possible
sequences mod m 
okay here if it was the sum of product of all sequences then we can do dp but if it is the product it can't be the same way because 
a*(c+d) a will be distributed but a*(c*d) a won't be distributed.
So here the mem array will be of pair first for result and the second is for the number of parameters i distribute to.

example problem : https://codeforces.com/contest/615/problem/D
CODE
----
const ll MOD=1e9+7;
const int N=200009;
int n;
pair<ll,ll> mem[N];
vector<ll> v;
ll cnt[N];
ll power(ll b,ll p)
{
    if(p==0)
        return 1;
    if(p&1ll)
        return (b%MOD*power((b*b)%MOD,p/2))%MOD;
    else
        return power((b*b)%MOD,p/2)%MOD;
}
pair<ll,ll> solve(int id)
{
    if(id==sz(v))
    {
        return mp(1,1);
    }
    pair<ll,ll> ret=mem[id];

    if(ret.first!=-1)
        return ret;
    ll ans=solve(id+1).first;
    ll c=solve(id+1).second;
    for(int i=1;i<=cnt[v[id]];i++)
    {

        pair<ll,ll> p=solve(id+1);
        c =(c+ p.second)%(MOD-1);
        ll val=p.first;
        ll res=power(v[id],p.second*i % (MOD-1));
        ans= (ans*((res *val )%MOD))%MOD;
    }
    return mem[id]=mp(ans,c);
}
int main()
{
    cin>>n;
    int no;
    for(int i=0;i<n;i++)
    {
        cin>>no;
        cnt[no]++;
        if(cnt[no]==1)
        v.pb(no);
    }
    clr(mem,-1);
    ll ans=solve(0).first;
    cout <<ans;
}
-----------------------------------------------------------------------------------------------------------------------------------------





