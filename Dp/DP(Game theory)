/*
---------------------------------------------------------------------------------------------------------------------------------------
Notes on Dp Game problems
- if at problem its given some already played turns so you have to know by your self who will play first.
----------------------------------------------------------------------------------------------------------------------------------------
CF918-D2-D

explanation : its a direct dp bec the graph is DAG  there is no cycles the logic of the dp [first player node postion]
[second player node position][last char taken in the prev turn] i will reverse the nodes to keep the first one is the one that
the current turn belongs to it and if the next turn returns 0 to the current turn then the current turn wins which is the target 
of the current player so its directly returns one which indicates that he wins but if the next turn returns one so the current turn
lose which is not the target of the curret player so he will loop untill he win if possible.
complexity : O( 26*n*n )
*/

vector< vector< pair<int ,int > > > v(105);
int mem[105][105][28];
int solve(int mxn,int ln,int c)
{
     int &ret=mem[mxn][ln][c];
     if(ret!=-1)
        return ret;
         int ans;
         for(int i=0;i<sz(v[mxn]);i++)
         {
             int ch=v[mxn][i].second;
             int no=v[mxn][i].first;
             if(ch>=c||c==27)
               if(! solve(ln,no,ch))
                  return ret=1;
         }
     return ret=0;
}
int main()
{
    int n,m;
    cin>>n>>m;
    int f,t;
    string ch;
    for(int i=0;i<m;i++)
    {
        cin>>f>>t>>ch;
        v[f].pb(mp(t,ch[0]-'a'));
    }
    clr(mem,-1);
    for(int i=1;i<=n;i++)
    {
        for(int j=1;j<=n;j++)
        {
           int y= solve(i,j,27);
            if(!y)
             cout<<'B';
            else
                cout<<'A';
        }
        cout<<endl;
    }
}
