Binary lefting: is a technique used before in sparse table and in getting LCA, its idea base on
any decimal number can be represented as a sum of (2^x) numbers for 0<=x<=n, so according to that
if i have for example a tree and i know that first parent of each node and i want to know the kth
parent for each node, so if i know the first parent i can know every 2^x parent and if i know every
2^x parent i can know the kth parent.

CODE for some problem 
---------------------
const int N=200009;
int a[N],arr[N],tree[4*N],pre[N],lastoccur[N],num[N],index[N],dp[N][29];
int n,m;
void build(int s=0,int e=m-1,int p=1)
{
    if(s==e)
    {
        tree[p]=a[s];
        return;
    }
    int mid=(s+e)/2;
    build(s,mid,p*2);
    build(mid+1,e,p*2+1);
    tree[p]=max(tree[p*2],tree[p*2+1]);
}
int query(int a,int b,int s=0,int e=m-1,int p=1)
{
    if(b<s||a>e||b<a)
        return -1;
    if(s>=a&&e<=b)
    {
        return tree[p];
    }
    int mid=(s+e)/2;
    return max(query(a,b,s,mid,p*2),query(a,b,mid+1,e,p*2+1));
}
void binary_lifting()
{
    for(int i=0;i<m;i++)
        dp[i][0]=pre[i];

    for(int j=1;(1<<j)<m;j++)
    {
        for(int i=0;i<m;i++)
        {
            if(dp[i][j-1]!=-1)
            dp[i][j]= dp[dp[i][j-1]][j-1];
            else
            dp[i][j]=-1;
        }
    }
}
int query2(int k,int no)
{
    int mx= 20;

    for(int i=mx;i>=0;i--)
    {
        if((1<<i)<=k&&no!=-1)
        {
            k-=(1<<i);
            no=dp[no][i];
        }
    }
    return no;
}
int main()
{

   int q;
   cin>>n>>m>>q;

   for(int i=0;i<n;i++)
   {
       int no;
       cin>>no;
       index[no]=i;
   }

   for(int i=0;i<m;i++)
   {
       int no;
       cin>>no;
       arr[i]=index[no];
   }
   clr(lastoccur,-1);
   clr(pre,-1);

   for(int i=0;i<m;i++)
   {
       int no= (arr[i]==0? n-1:arr[i]-1);

       if(lastoccur[no]!=-1)
       {
           pre[i]=lastoccur[no];
       }

       lastoccur[arr[i]]=i;
   }

   binary_lifting();


   for(int i=0;i<m;i++)
   {
       a[i]=query2(n-1,i);
   }

   build();

   while(q--)
   {
       int l,r;
       cin>>l>>r;
       l--;
       r--;

       int ret=query(l,r);
       if(ret>=l||n==1)
        cout<<'1';
       else
        cout<<'0';
   }
}
---------------------------------------------------------------------------------------------------------------------------------------
