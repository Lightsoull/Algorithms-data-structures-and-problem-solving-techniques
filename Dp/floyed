we use the k as an intermediate node between i and j 

code for floyed
1- intialize all dist array to inf as there is no path
2- put the diagonal to zero 
3- put in the dist array the edges you get 
4- if there are multiple edges just minmize
5- floyed deals normally with negative weights, if the path doesn't pass through negative cycle then the answer will be in dist[i][j]
and if it passes through a negative cycle then the answer will be -inf, you can test if the path from i to j pass by a negative 
cycle by the anyEffectiveCycle function below.

for(int k=1;k<=n;k++)
   for(int i=1;i<=n;i++)
      for(int j=1;j<=n;j++)
          if(dist[i][k]!=oo && dist[k][j]!=oo)
          dist[i][j]=min( dist[i][j], dist[i][k]+dist[k][j] )
          
          
 --------------------------------------------------------------------------
 
 
    What if we need to get the path? 2 ways
 
    Define path arr, initialize it to -1, which means there is no path
    If path (i, j) has intermediate node k, then path[i][j] = k; means path from i to j pass with k
     Write a recursive function be like:
    
     void build_path(int src, int dest)
    {
        if( path[src][dest] == -1 ) //So this is the last way
        {
            // print
            return;
        }
        build_path( src, path[src][dest]);
        build_path( path[src][dest], dest);
    }
   ------------------------------------------------------------
 
     Other way is through previous of path: prev[i][j]: last node before j from i to j
     Initialize repv[i][j] = i
     If path (i, j) has intermediate node k, then prev[i][j] = prev[k][j];
     Write a recursive function be like:
    
     void printPath(int i, int j)
     {
        if (i != j)
            printPath(i, prev[i][j]);
        printf(" %d", j);
    }
   -----------------------------------------------------------------
   Applications on Floyed

1- transitive closure which only cares about there is a path between i to j or not 
2- assign all the adj array to zeros
3- the adj array if there is a path bet i to j so assign it to one
 
// if you want to know if there is a path between i and i but contain at least one node in between then don't intialize
the diagonal of the matrix by ones.
 

void TransitiveClosure()
{
  // assume matrix is 0 for disconnect, 1 is connect
    // we only care if a path exist or not, not a shortest path value
    
 for(int k=1;k<=n;k++)
   for(int i=1;i<=n;i++)
      for(int j=1;j<=n;j++)
        adj[i][j] |= (adj[i][k] & adj[k][j]);
}
        
----------------------------------------------------------------------

2- minmax

void minimax()
{
    // find path such that max value on road is minimum
 
    lp(k, n) lp(i, n) lp(j, n)
        adj[i][j] = min(adj[i][j], max(adj[i][k], adj[k][j]) );
}
-------------------------------------------------------------------------

void maximin()
{
    // find path such that min value on road is maximum
 
    lp(k, n) lp(i, n) lp(j, n)
        adj[i][j] = max(adj[i][j], min(adj[i][k], adj[k][j]) );
}
--------------------------------------------------------------------------

Works only in DAG graph

wants the path with the longest edge

void longestPathDAG()
{
    lp(k, n) lp(i, n) lp(j, n)
        adj[i][j] = max(adj[i][j], max(adj[i][k]+adj[k][j]) );
}
----------------------------------------------------------------------------

void countPaths()
{
    lp(k, n) lp(i, n) lp(j, n)  // Floyd warshal for counting #of paths
        adj[i][j] += adj[i][k] * adj[k][j];
 
    // 1- assume graph is DAG
    /*
     * k = 5, i = 1, j = 2 we will use adj[ 1 ][ 5 ] with old value
     * k = 5, i = 1, j = 5 we will update adj[ 1 ] [ 5 ]
     * k = 5, i = 1, j = 7 we will use adj[ 1 ][ 5 ] with new value
     * Won't this give and incorrect result?
     *
     * NO. E.g. when k = 5, i = 1, j = 5:
     * adj[1][5] += adj[1][5] * adj[5][5];
     * adj[5][5] = 0, so no update happens. In general, when k = i or j, no updates happens, so in-placement update is fine.
     */
 
    /*
     * What if graph is not DAG.
     * if(adj[i][i] > 0) -> i has a cycle path on it
     *
     * Generally, for any node v that has a cycle,
     *      if i reaches v, and v reaches j, then count of (i, j) is useless as count is OO. Remain adj[][] is valid
     */
 
}
-------------------------------------------------------------------------------------------------------------------
 
bool isNegativeCycle() {
    lp(i, n)
        if(adj[i][i] < 0)
            return true;    // then node i got to i with overall cost < 0.
 
    return false;
}
--------------------------------------------------------------------------------------------------------
bool anyEffectiveCycle(int src, int dest)
{
    lp(i, n)
        if(adj[i][i] < 0 && adj[src][i] < OO && adj[i][dest] < OO)
            return true;
 
    return false;   // there is a finite path although cycles if any
}
------------------------------------------------------------------------------------------------------
