/*
Every integer array or string can be hashed to a single number represent it.
for example the integer array [1 2 5] its hashing will be (1*100+2*10+5)= 125 as a number.
            the string st= "anf" its hashing will be ('a'*100+'n'*10+'f')= some number.
hash code : is the number that the string or the array will be hashed to.
how to generate the hash code for a string/array

for(int i=0;i<str.size();i++)
code=( code*BASE+(str[i]-'a') )%MOD;

----------------------------------------------------------------------------
--> it is better to make the base random to avoid hacking and collision 
mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
ll BASE = uniform_int_distribution <int> (2, MOD - 1)(rng);
where MOD is the MOD you will use.
----------------------------------------------------------------------------

BASE= 311
MOD= 1000000007
this may cause a collosion which may cause WA but rarely if this happened change the MOD and/or the BASE but if you will change the MOD 
change it to another prime.
-Trick
to grantee that your answer will be correct even if there is collosion ocurrs, if you are hashing a string to a certain number let it be 
W then create a map which maps W to the string, so if you are searching for a string by its W also search in the set of strings the W
mapped to to grantee the answer is true if there is a collosion and for the time complexity it is very rare to occur a collosion so it
is okay.

Note: if you have the hash value let be v1 of a string say aabc and you want to get the hash value of the same string but 
change b to c so just subtract from v1 (b-'a')*poweroften[len-1-indexofb] and then add (c-'a')*poweroften[len-1-indexofb].

Rolling hash by ( Rabin-Karp algorithm )
Problem: getting the occurancess of a certain subtring in to a string
the idea: since i can express each string as a number by hashing so if i am searching for a string is just like i am searching for a 
number in a linear time.
how ?
I can move on to the main string and calculate the hash code for the first M chars, M is the length of the pattern and check whether
it is equal to the hash code of the pattern or not and then delete the first char you taked and add the last char just like slidding
window problem.
CODE
ll removeAt(ll code, int idx, int val) {
  return (code - (val * fastpow(BASE, idx)) % MOD + MOD) % MOD;
}

ll addAt(ll code, int idx, int val) {
  return (code + (val * fastpower(BASE, idx)) % MOD) % MOD;
}

ll shiftLeft(ll code) {
  return (code * BASE) % MOD;
}
void pattern_search(string main, string pat) {
  int n = pat.size();
  ll patCode = 0;
  for (int i = 0; i < (int) pat.size(); ++i) {
    patCode = shiftLeft(patCode);
    patCode = addAt(patCode, 0, val(pat[i]));
  }

  ll subCode = 0;
  string subStr;
  for (int i = 0; i < (int) main.size(); ++i) {
    if (i - n >= 0) {
      subCode = removeAt(subCode, n - 1, val(main[i - n]));
      subStr.erase(subStr.end() - 1);
    }
    subCode = shiftLeft(subCode);
    subCode = addAt(subCode, 0, val(main[i]));
    subStr.insert(subStr.begin(), main[i]);
    if (patCode == subCode)
      cout << subCode << "\t" << subStr << "\n";
  }
}
complexity : O(n)
----------------------------------------------------------------------------------------------------------------------------------------
Notes
- if you are hashing a string of alphabet chars then there is 26 char so you have to use mod and try to use some big prime one to avoid 
collosion.
- if you are hashing a string of digits then we have only 10 digits (0-9) so we can not use mod but store the hash code in long long
and since there is no mod there is no collosion for sure and use base 11 .
- Take care the string 000 has the same value as 00 as 0 all of them have a hash code zero so to deal with that shift the digits
value by one so 0 become 1 and 1 become 2 and so on and let the base be 11, the same for alphabet strings don't let 'a' be zero 
let it be one.
----------------------------------------------------------------------------------------------------------------------------------------








