/*
explantion :

1- here KMP is for finding a pattern( substring ) in a string in an efficient way.
2- if you tried to do so using brude force approach it will cost n*m (n is the length of string and m is the length of the pattern) which
is bad complexity.
3- some helpful terminalogy

     1- Proper Prefix List (PPL): eg for the string " abcdr " is "a" , "ab", "abc" ,"abcd" only not containing the whole string but the 
     normal prefix is the previous plus "abcdr" containing the whole string.
   
     2- Proper Suffix List (PSL): eg for the string " abcdr " is "r" , "dr", "cdr" ,"bcdr" only not containing the whole string but the 
     normal suffix is the previous plus "abcdr" containing the whole string.
     
 4- Failure Function OR Prefix function : it expresses the longest common proper prefix and suffix for eg " aabaab "
 
 F[0] always equals to zero
 F[1]=1 prefix 'a'  and suffix 'a'
 F[2]=0
 F[3]=1 prefix 'a'  and suffix 'a'
 F[4]=2 prefix 'aa'  and suffix 'aa'
 F[5]=3 prefix 'aab'  and suffix 'aab'
 
 5- KMP algorithsm based on 
 
 the fact that when i brudeforce i will start from each index in the main string and check for the length of the pattern and once i fail
 i will go back and start from the next index so there is kind of repition, I can start from the next index only if my pattern is for eg
 like this aaaa so Failture function equals to 3 here y3ny from here its idea comes.
 
6- Complexity for KMP is O(n) n is size of main string and failture function is O(m) m is the length of the pattern so total is O( n+m )

7- Failture function implementation :
  the same idea of KMP i will try to match the prefix of the pattern with the pattern itself.
  
 --------------------------CODE OF KMP------------------------
 
 void KMP(string str,string pat)
{
    
    int n=sz(str);
    int m=sz(pat);
    
    vector<int> longestprefix= computeprefix(pat);
    
    for(int i=0,k=0;i<n;i++)
    {
        while(k>0&&pat[k]!=str[i])
            k=longestprefix[k-1];
        
        if(pat[k]==str[i])
            k++;
        if(k==m)
        {
            cout<<i-m+1<<endl;    // begining index of the first match
            k=longestprefix[k-1];
        }
    }
}

---------------------Failure Function------------------------------

vector<int> computeprefix(string pat)
{
    int m=sz(pat);
    vector<int> longestprefix(m);

    for(int i=1,k=0;i<m;i++)   // i from 1 bec F[0]=0
    {
        while(k>0&&pat[k]!=pat[i])
            k=longestprefix[k-1];
        
        if(pat[k]==pat[i])
           longestprefix[i]= ++k;
        else
            longestprefix[i]=k;
        
    }
    
    return longestprefix;
}
Notes about fail function:
-if you want to get the fail function of two concatenated strings A and B and don't want to overlap then run fail function on
a new string = a + "#" + b.
----------------------------------------------------------------------------------------------------------------------------------------
 Some Applictions on KMP and failture Function
 ---------------------------------------------
 
 1- knowing the longest palindrome prefix or the longest palindrome suffix in a string S
 lets assume char @ and lets construct   (S)@(reverse of S) and get normally F[size of S -1] ,  F is the Failure array
 
 2- Repition and Failutre Function 
 
   if i have a certain string concatenated N times and i want to know the len of its block that is concatented okay here the 
   Failure function will get the prefix but couldn't take from the last block so simply len-F[len-1] will be the size of the block, 
   But Take care if the length of the block you get it doesn't len doesn't divisible by it so there is no concatenation. 
   
 Another Way to do it
 conactentate the string with itself and get the second match of the orginal string in the  concatenated string its index of begining
 will be the len of the block from the zero to index-1.
 
 3- Given a string P for each prefix count its frequency So we will make use of KMP Failure Function again
    the repetition of prefix will be as a suffix of a substring in it.
    
    CODE
  --------
  
 vector<int> F=computeprefix(pat);

int n=sz(F);

vector<int> freq(n+1);

for(int i=0;i<n;i++)
    freq[F[i]]++;

for(int i=n-1;i>0;i--)
   freq[F[i-1]]+=freq[i];

freq.erase(freq.begin());

-----------------------------------------
4- Given a string P for each prefix count its frequency in string S So we will make use of KMP Failure Function again
   
   1-Hint : Make use of pervious problem.
   2- make P@S
   
5- The unique Prefixes By Failure Function

CODE
------

vector<int> F=computeprefix(pat);

vector<bool> v(sz(F));


for(int i=0;i<sz(F);i++)
{
    
    int k=F[i];
    
    
    if(k)
        v[k]=1;
    
}
for(int i=0;i<sz(v);i++)
{
    if(!v[i])
        cout<<pat.substr(0,i+1)<<endl;
}
-------------------------------------------------------------------------------
6- The distinct Substrings in a given string

okay imagine if i have a the dinstict substrings in the string "aab" okay now if i add char 'a' to the string the strings that this char
add are four strings which are the suffixes of the new string "aaba" so from the pervious problems you already can know the distinct
prefixes right so why not i reverse the string and the suffixes and get the count of the unique prefixes.







































  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 
 
   
   
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
